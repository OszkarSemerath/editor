




//========================================================================
//
// File: ImportBPSql.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/gen_import_java.arc
// Version:      $Revision: 1.41 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//======================================================================== 
//

package com.mentor.nucleus.bp.io.sql;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.Vector;
import java.util.List;
import java.io.FileNotFoundException;
import org.eclipse.core.runtime.IPath;
import java.util.Map;
import java.util.Vector;
import java.util.UUID;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.preferences.IScopeContext;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.PlatformUI;
import org.osgi.service.prefs.Preferences;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.ui.Selection;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.ui.preferences.BridgePointProjectPreferences;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import com.mentor.nucleus.bp.io.core.CoreImport;
import com.mentor.nucleus.bp.io.core.ImportInteger;
import com.mentor.nucleus.bp.ui.canvas.*;
import com.mentor.nucleus.bp.ui.text.activity.AllActivityModifier;

public class ImportBPSql extends CoreImport
{
    String m_inFile; // used for error messages
    private int m_num_s_parent_found = 0;
    private boolean m_parseAll = true;
    private boolean m_parseGraphics = true;
    private boolean IPR_WindowSelection = false;
    private boolean initialCheck = false;
    private List<NonRootModelElement> loadedInstances = new Vector<NonRootModelElement>();
    private List<NonRootModelElement> loadedProxies = new Vector<NonRootModelElement>();
    private List<NonRootModelElement> loadedGraphicsInstances = new Vector<NonRootModelElement>();
    private SystemModel_c m_parent;
    private static String streamFileName = "stream";

    private UUID dataPkgUUID = null;

    /**
     * Holds Java-only functionality employed by this importer.
     */
    private ImportBPSqlHelper helper = new ImportBPSqlHelper(this);

    String actualVersion = getHeader().getFileFormatVersion();

    public ImportBPSql(String fileName, Ooaofooa aModelRoot, SystemModel_c parent, boolean parseAll, boolean clearDatabase, boolean isTemplate) throws FileNotFoundException {
        super(aModelRoot, fileName, clearDatabase, isTemplate);
        m_inFile = fileName;
        m_parseAll = parseAll;
        m_parent = parent;
    }

    public ImportBPSql(IPath filePath) throws FileNotFoundException {
        super(filePath);
    }

    /* (non-Javadoc)
     * @see org.eclipse.core.resources.IWorkspaceRunnable#run(org.eclipse.core.runtime.IProgressMonitor)
     */
    public void run(IProgressMonitor pm) {
        m_success = doLoadSql(pm);
        finishLoad(pm);
    }

        public NonRootModelElement[] getLoadedInstances() {
            return loadedInstances.toArray(new NonRootModelElement[loadedInstances.size()]);
        }

        public NonRootModelElement[] getLoadedGraphicalInstances() {
          return new NonRootModelElement[0];
        }

     public void performCleanUp(IProgressMonitor pm) throws IOException{
        if (m_clear_database) {
               Domain_c domain = Domain_c.DomainInstance(getModelRoot());
               if (domain != null) {
                // clear out all elements held by the model-root
                AllActivityModifier aam = new AllActivityModifier(domain, pm);
                aam.processAllActivities(AllActivityModifier.CLEAR);
                getModelRoot().clearDatabase(pm);
                }
        }
    }

    public boolean isExpectedContent(String actualContent) {
        return actualContent.equals("domain");
    }

    public boolean isExpectedVersion(String actualVersion)
    {
        return actualVersion.equals("6.1D")
        ;
    }

    public String getErrorMessage() {
        return m_errorMessage;
    }

    public void preprocessStatement(String s, BufferedReader is)
        throws IOException {
        if (s.toUpperCase().equals("INSERT INTO S_DOM")) //$NON-NLS-1$
        {
            m_num_s_parent_found += 1;
        }
    }

    /* (non-Javadoc)
     * @see com.mentor.nucleus.bp.io.sql.CoreImport#postprocessStatements()
     */
    public int postprocessStatements() {
        if (m_num_s_parent_found == 0) {
            m_errorMessage =
                "The file "
                    + m_inFile
                    + " is not a valid UML domain model file.";
            return PPS_ERROR;
        } else if (m_num_s_parent_found > 1) {
            m_errorMessage =
                "The file " + m_inFile + " contains multiple domains.";
            return PPS_ERROR;
        }
        return PPS_OK;
    }

/*
    Since the call to CoreImport.doLoadSql (see the run method
    above) is done in a different thread, we can't do anything
    that would cause a fireModelChange to occur in that sub-
    thread.  All the UI processing is therefore done by this
    function, after the file has been loaded.
*/
    public void finishLoad(IProgressMonitor pm)
    {
      if ( m_success )
      {
        Ooaofooa modelRoot = getModelRoot();
        modelRoot.setFullModelIsLoaded();
        Domain_c d2 = null;
                ModelRoot.disableChangeNotification();
        try {

        if(m_parseGraphics){
        pm.beginTask("Completing import...", 91 + 3);
        }else{
            pm.beginTask("Completing import...", 85 + 3);
        }

        Domain_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Subsystem_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExternalEntity_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExternalEntityInModel_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExternalEntityDataItem_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExternalEntityEvent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExternalEntityEventDataItem_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DataType_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CoreDataType_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        UserDataType_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Bridge_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        BridgeParameter_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ExternalEntityEventData_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        EnumerationDataType_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Enumerator_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Function_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        FunctionParameter_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Association_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SimpleAssociation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        LinkedAssociation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SubtypeSupertypeAssociation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DerivedAssociation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsSimpleParticipant_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsSimpleFormalizer_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsAssociatedOneSide_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsAssociatedOtherSide_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsLink_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsSupertype_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsSubtype_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsDerivedOneSide_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassAsDerivedOtherSide_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassInAssociation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ReferredToClassInAssoc_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ReferringClassInAssoc_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CommunicationPath_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        EeToSmCommPath_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SmToSmCommPath_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SmToEeCommPath_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        EeToSmEventComm_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SmToSmEventComm_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SmToEeEventComm_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        AccessPath_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SmToObjAccessPath_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SmToEeAccessPath_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SmToObjAttributeAccess_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SmToEeDataItemAccess_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        StateMachine_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        StateMachineEvent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        StateMachineState_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        StateEventMatrixEntry_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        EventIgnored_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        NewStateTransition_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CantHappen_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        CreationTransition_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        NoEventTransition_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Transition_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        MooreStateMachine_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        MealyStateMachine_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        MooreActionHome_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        MealyActionHome_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ActionHome_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Action_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        InstanceStateMachine_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassStateMachine_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        StateMachineEventDataItem_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        EventSupplementalData_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SupplementalDataItems_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        PolymorphicEvent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        SemEvent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        NonLocalEvent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        LocalEvent_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Operation_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        OperationParameter_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        Attribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ModelClass_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        BaseAttribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ReferentialAttribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        DerivedBaseAttribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        NewBaseAttribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        AttributeReferenceInClass_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassIdentifier_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ClassIdentifierAttribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ImportedClass_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);
        ReferredToIdentifierAttribute_c.batchRelateAll(modelRoot, false, true, false);
        pm.worked(1);


    if(m_parseGraphics){
        Model_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        GraphicalElement_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Shape_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        Connector_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        LineSegment_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
        FloatingText_c.batchRelateAll(getGraphicsModelRoot(), false, true);
        pm.worked(1);
                WaypointInMove_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Graphelement_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Graphconnector_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Property_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Diagramelement_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Reference_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Diagramlink_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Graphnode_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Diagram_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Semanticmodelbridge_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Simplesemanticmodelelement_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Graphedge_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Waypoint_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Coresemanticmodelbridge_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Element_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Leafelement_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Image_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Textelement_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Graphicprimitive_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Polyline_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
                Ellipse_c.batchRelateAll(getGraphicsModelRoot(), false, true);
                pm.worked(1);
        }
        helper.upgradePackages(getRootModelElement(), getModelRoot());
        helper.importPreBP7_1LineSegments();
        helper.importPreBP7_1Connectors();
        helper.importPreBP7_1_1ConnectorTexts();
        if((!actualVersion.equals("7.1.2")) && (!actualVersion.equals("7.1.3")))
            helper.createAnchorsOnSegmentsForPre7_1_2Connectors();
        d2 = Domain_c.DomainInstance(modelRoot);
        if ( m_parent != null )
        {
            d2.relateAcrossR28To((SystemModel_c)m_parent);
            modelRoot.setRoot((SystemModel_c)m_parent);
        }

        //Setting the root model element
        rootModelElement = d2;

        pm.worked(1);
        // see if the domains id is unique
        // Move root domain items into Tiger-compatible packages
        Function_c [] fns = Function_c.getManyS_SYNCsOnR23(d2);
        if ( fns.length > 0 ){
          FunctionPackage_c fpk = createDefaultFunctionPackage(modelRoot);
          for (int i =0; i < fns.length; i++){
            FunctionInPackage_c fip = new FunctionInPackage_c(modelRoot);
            fpk.relateAcrossR31To(fip);
            fip.relateAcrossR31To(fns[i]);
          }
        }
        DataType_c[] dts = DataType_c.DataTypeInstances(modelRoot);
        if ( dts.length > 0 ) {
          DataTypePackage_c dpk = createDefaultDataTypePackage(modelRoot);
          for (int i = 0; i < dts.length; i++) {
            DataTypeInPackage_c dip = new DataTypeInPackage_c(modelRoot);
            dpk.relateAcrossR39To(dip);
            dip.relateAcrossR39To(dts[i]);
          }
        }
        ExternalEntity_c[] ees = ExternalEntity_c.getManyS_EEsOnR8(d2);
        if ( ees.length > 0 ) {
          ExternalEntityPackage_c epk = createDefaultExternalEntityPackage(modelRoot);
          for (int i = 0; i < ees.length; i++) {
            ExternalEntityInPackage_c eip = new ExternalEntityInPackage_c(modelRoot);
            epk.relateAcrossR33To(eip);
            eip.relateAcrossR33To(ees[i]);
          }
        }
        Subsystem_c[] sss = Subsystem_c.getManyS_SSsOnR1(d2);
        for (int i = 0; i < sss.length; i++){
            SubsystemInDomain_c sid = new SubsystemInDomain_c(modelRoot);
            d2.relateAcrossR43To(sid);
            sid.relateAcrossR43To(sss[i]);
        }
        ModelClass_c [] mc_set = ModelClass_c.ModelClassInstances(modelRoot);
        for (int i = 0; i < mc_set.length; i++)
        {
            mc_set[i].Addidentifiers();
        }
        ReferentialAttribute_c [] rattr_set = ReferentialAttribute_c.ReferentialAttributeInstances(modelRoot);
        for (int i = 0; i < rattr_set.length; i++)
        {
            rattr_set[i].Setdatatype();
        }
        helper.fixUpGraphicalData();
        Ooaofooa.Removeinconsistentnonlocalevents(getModelRoot());
        setGraphicalRepresents();
        pm.done();
        if(m_parseAll){
        AllActivityModifier aam = new AllActivityModifier(d2, pm);
        aam.processAllActivities(AllActivityModifier.PARSE);
      }

        //check if they are long based UUIDs or
        //even in case of UUID based model, it could be copy of same file with different name.
        //there is also unit test for this
    if (d2 != null && !isDomainIdUnique(d2)) {
       IDConvertor.getInstance().recreateUUID(d2);
    }
        Ooaofooa mr = Ooaofooa.getDefaultInstance();
        Ooaofgraphics gmr = Ooaofgraphics.getDefaultInstance();
        try {
		  mr.disableDeltaCollection();
		  gmr.disableDeltaCollection();
          helper.upgradeDSAs(getModelRoot());
        helper.associateDTsWithDomain(getModelRoot());
        helper.formalizeExternalEntityPackageLinkingAssociations(getModelRoot());
        helper.formalizeFunctionPackageLinkingAssociations(getModelRoot());
        helper.createShapeSubtypes(getGraphicsModelRoot());
        loadedInstances.addAll(helper.upgradeTransitions(loadedInstances));
        helper.upgradeEventData(getModelRoot(), getRootModelElement());
        helper.upgradeLifespans(getRootModelElement());
        helper.upgradeElementOrder(getModelRoot());
        helper.upgradeEEsForIsRealized();
		helper.upgradeDatatypes(loadedInstances);
        }
        finally {
            mr.enableDeltaCollection();
            gmr.enableDeltaCollection();
        }
    }   finally {
                    ModelRoot.enableChangeNotification();
    }
	  if (d2 != null) {
        Ooaofooa.getDefaultInstance().fireModelElementLoaded(d2);
	  }
    }
  }

    
    
    public void processStatement(Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm ) {
        ModelRoot.disableChangeNotification();
      try {
        createS_DOM(modelRoot, table, parms, rawParms, numParms, pm);
        createS_SS(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EE(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EEM(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EEDI(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EEEVT(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EEEDI(modelRoot, table, parms, rawParms, numParms, pm);
        createS_DT(modelRoot, table, parms, rawParms, numParms, pm);
        createS_CDT(modelRoot, table, parms, rawParms, numParms, pm);
        createS_UDT(modelRoot, table, parms, rawParms, numParms, pm);
        createS_BRG(modelRoot, table, parms, rawParms, numParms, pm);
        createS_BPARM(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EEEDT(modelRoot, table, parms, rawParms, numParms, pm);
        createS_EDT(modelRoot, table, parms, rawParms, numParms, pm);
        createS_ENUM(modelRoot, table, parms, rawParms, numParms, pm);
        createS_SYNC(modelRoot, table, parms, rawParms, numParms, pm);
        createS_SPARM(modelRoot, table, parms, rawParms, numParms, pm);
        createR_REL(modelRoot, table, parms, rawParms, numParms, pm);
        createR_SIMP(modelRoot, table, parms, rawParms, numParms, pm);
        createR_ASSOC(modelRoot, table, parms, rawParms, numParms, pm);
        createR_SUBSUP(modelRoot, table, parms, rawParms, numParms, pm);
        createR_COMP(modelRoot, table, parms, rawParms, numParms, pm);
        createR_PART(modelRoot, table, parms, rawParms, numParms, pm);
        createR_FORM(modelRoot, table, parms, rawParms, numParms, pm);
        createR_AONE(modelRoot, table, parms, rawParms, numParms, pm);
        createR_AOTH(modelRoot, table, parms, rawParms, numParms, pm);
        createR_ASSR(modelRoot, table, parms, rawParms, numParms, pm);
        createR_SUPER(modelRoot, table, parms, rawParms, numParms, pm);
        createR_SUB(modelRoot, table, parms, rawParms, numParms, pm);
        createR_CONE(modelRoot, table, parms, rawParms, numParms, pm);
        createR_COTH(modelRoot, table, parms, rawParms, numParms, pm);
        createR_OIR(modelRoot, table, parms, rawParms, numParms, pm);
        createR_RTO(modelRoot, table, parms, rawParms, numParms, pm);
        createR_RGO(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_COMM(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_EESMC(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_SMSMC(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_SMEEC(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_EESME(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_SMSME(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_SMEEE(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_ACC(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_SMOA(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_SMEEA(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_SMOAA(modelRoot, table, parms, rawParms, numParms, pm);
        createCA_SMEED(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_SM(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_EVT(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_STATE(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_SEME(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_EIGN(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_NSTXN(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_CH(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_CRTXN(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_NETXN(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_TXN(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_MOORE(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_MEALY(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_MOAH(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_MEAH(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_AH(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_ACT(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_ISM(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_ASM(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_EVTDI(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_SUPDT(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_SDI(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_PEVT(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_SEVT(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_NLEVT(modelRoot, table, parms, rawParms, numParms, pm);
        createSM_LEVT(modelRoot, table, parms, rawParms, numParms, pm);
        createO_TFR(modelRoot, table, parms, rawParms, numParms, pm);
        createO_TPARM(modelRoot, table, parms, rawParms, numParms, pm);
        createO_ATTR(modelRoot, table, parms, rawParms, numParms, pm);
        createO_OBJ(modelRoot, table, parms, rawParms, numParms, pm);
        createO_BATTR(modelRoot, table, parms, rawParms, numParms, pm);
        createO_RATTR(modelRoot, table, parms, rawParms, numParms, pm);
        createO_DBATTR(modelRoot, table, parms, rawParms, numParms, pm);
        createO_NBATTR(modelRoot, table, parms, rawParms, numParms, pm);
        createO_REF(modelRoot, table, parms, rawParms, numParms, pm);
        createO_ID(modelRoot, table, parms, rawParms, numParms, pm);
        createO_OIDA(modelRoot, table, parms, rawParms, numParms, pm);
        createO_IOBJ(modelRoot, table, parms, rawParms, numParms, pm);
        createO_RTIDA(modelRoot, table, parms, rawParms, numParms, pm);
      if(m_parseGraphics){
      if ( table.equalsIgnoreCase("GD_MD") ) {   //$NON-NLS-1$
        helper.parsePreBP7_1Model(rawParms);
      } else if ( table.equalsIgnoreCase("GD_GE") ) {   //$NON-NLS-1$
        helper.parsePreBP7_1GraphicalElement(rawParms);
      } else if ( table.equalsIgnoreCase("GD_SHP") ) {   //$NON-NLS-1$
        helper.parsePreBP7_1Shape(rawParms);
      } else if ( table.equalsIgnoreCase("GD_CON") ) {   //$NON-NLS-1$
        helper.parsePreBP7_1Connector(rawParms);
      } else if ( table.equalsIgnoreCase("GD_LS") ) {   //$NON-NLS-1$
        helper.parsePreBP7_1LineSegment(rawParms);
      } else if ( table.equalsIgnoreCase("GD_CTXT") ) {   //$NON-NLS-1$
        helper.storePreBP7_1_1ConnectorText(rawParms);
      }
    }
        pm.worked(1);
        } finally {
                    ModelRoot.enableChangeNotification();
        }
    }

  private void createS_DOM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Domain_c newInst = null;
    if(table.equalsIgnoreCase("S_DOM")) { //$NON-NLS-1$
        newInst = new Domain_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
           m_templateFile ? "" : removeTics((String) parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4), true), 
           IdAssigner.NULL_UUID        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_SS (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Subsystem_c newInst = null;
    if(table.equalsIgnoreCase("S_SS")) { //$NON-NLS-1$
        newInst = new Subsystem_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExternalEntity_c newInst = null;
    if(table.equalsIgnoreCase("S_EE")) { //$NON-NLS-1$
      boolean addToUpgradeList = false;
      if(parms.size() <= 7) {
        addToUpgradeList = true;
      }
      parms.setSize(8);
        newInst = new ExternalEntity_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4), true), 
          parms.elementAt(5) != null ? removeTics((String)parms.elementAt(5)) : "", 
          parms.elementAt(6) != null ? removeTics((String)parms.elementAt(6)) : "", 
          parms.elementAt(7) != null && ((String)parms.elementAt(7)).equals( "false" ) ? false : true        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EEM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExternalEntityInModel_c newInst = null;
    if(table.equalsIgnoreCase("S_EEM")) { //$NON-NLS-1$
        newInst = new ExternalEntityInModel_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           Integer.parseInt((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EEDI (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExternalEntityDataItem_c newInst = null;
    if(table.equalsIgnoreCase("S_EEDI")) { //$NON-NLS-1$
        newInst = new ExternalEntityDataItem_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EEEVT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExternalEntityEvent_c newInst = null;
    if(table.equalsIgnoreCase("S_EEEVT")) { //$NON-NLS-1$
        newInst = new ExternalEntityEvent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           Integer.parseInt((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6)), 
           removeTics((String)parms.elementAt(7))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EEEDI (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExternalEntityEventDataItem_c newInst = null;
    if(table.equalsIgnoreCase("S_EEEDI")) { //$NON-NLS-1$
        newInst = new ExternalEntityEventDataItem_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_DT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DataType_c newInst = null;
    if(table.equalsIgnoreCase("S_DT")) { //$NON-NLS-1$
    parms.setSize(4);
        newInst = new DataType_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           removeTics((String)parms.elementAt(2)).trim(), 
           "",
           ""        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_CDT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CoreDataType_c newInst = null;
    if(table.equalsIgnoreCase("S_CDT")) { //$NON-NLS-1$
        newInst = new CoreDataType_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
           Integer.parseInt((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_UDT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    UserDataType_c newInst = null;
    if(table.equalsIgnoreCase("S_UDT")) { //$NON-NLS-1$
        newInst = new UserDataType_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           Integer.parseInt((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_BRG (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Bridge_c newInst = null;
    if(table.equalsIgnoreCase("S_BRG")) { //$NON-NLS-1$
    parms.setSize(8);
        newInst = new Bridge_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5), true), 
           removeTics((String)parms.elementAt(6)), 
           Integer.parseInt((String)parms.elementAt(7)),
           ""        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_BPARM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    BridgeParameter_c newInst = null;
    if(table.equalsIgnoreCase("S_BPARM")) { //$NON-NLS-1$
    parms.setSize(5);
        newInst = new BridgeParameter_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           removeTics((String)parms.elementAt(2)).trim(), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true), 
           Integer.parseInt((String)parms.elementAt(4)),
           "",
           Gd_c.Null_unique_id(),
           ""        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EEEDT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ExternalEntityEventData_c newInst = null;
    if(table.equalsIgnoreCase("S_EEEDT")) { //$NON-NLS-1$
        newInst = new ExternalEntityEventData_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_EDT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    EnumerationDataType_c newInst = null;
    if(table.equalsIgnoreCase("S_EDT")) { //$NON-NLS-1$
        newInst = new EnumerationDataType_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_ENUM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Enumerator_c newInst = null;
    if(table.equalsIgnoreCase("S_ENUM")) { //$NON-NLS-1$
    parms.setSize(4);
        newInst = new Enumerator_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
           removeTics((String)parms.elementAt(1)).trim(), 
           removeTics((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true),
          Gd_c.Null_unique_id()        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_SYNC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Function_c newInst = null;
    if(table.equalsIgnoreCase("S_SYNC")) { //$NON-NLS-1$
    parms.setSize(7);
        newInst = new Function_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5), true), 
           Integer.parseInt((String)parms.elementAt(6)),
           ""        );
    loadedInstances.add(newInst);
      }
  }
  private void createS_SPARM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    FunctionParameter_c newInst = null;
    if(table.equalsIgnoreCase("S_SPARM")) { //$NON-NLS-1$
    parms.setSize(5);
        newInst = new FunctionParameter_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           removeTics((String)parms.elementAt(2)).trim(), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true), 
           Integer.parseInt((String)parms.elementAt(4)),
           "",
           Gd_c.Null_unique_id(),
           ""        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_REL (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Association_c newInst = null;
    if(table.equalsIgnoreCase("R_REL")) { //$NON-NLS-1$
        newInst = new Association_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
           Integer.parseInt((String)parms.elementAt(1)), 
           removeTics((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_SIMP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SimpleAssociation_c newInst = null;
    if(table.equalsIgnoreCase("R_SIMP")) { //$NON-NLS-1$
        newInst = new SimpleAssociation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_ASSOC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    LinkedAssociation_c newInst = null;
    if(table.equalsIgnoreCase("R_ASSOC")) { //$NON-NLS-1$
        newInst = new LinkedAssociation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_SUBSUP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SubtypeSupertypeAssociation_c newInst = null;
    if(table.equalsIgnoreCase("R_SUBSUP")) { //$NON-NLS-1$
        newInst = new SubtypeSupertypeAssociation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_COMP (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DerivedAssociation_c newInst = null;
    if(table.equalsIgnoreCase("R_COMP")) { //$NON-NLS-1$
        newInst = new DerivedAssociation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
           removeTics((String)parms.elementAt(1))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_PART (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsSimpleParticipant_c newInst = null;
    if(table.equalsIgnoreCase("R_PART")) { //$NON-NLS-1$
        newInst = new ClassAsSimpleParticipant_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_FORM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsSimpleFormalizer_c newInst = null;
    if(table.equalsIgnoreCase("R_FORM")) { //$NON-NLS-1$
        newInst = new ClassAsSimpleFormalizer_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_AONE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsAssociatedOneSide_c newInst = null;
    if(table.equalsIgnoreCase("R_AONE")) { //$NON-NLS-1$
        newInst = new ClassAsAssociatedOneSide_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_AOTH (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsAssociatedOtherSide_c newInst = null;
    if(table.equalsIgnoreCase("R_AOTH")) { //$NON-NLS-1$
        newInst = new ClassAsAssociatedOtherSide_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_ASSR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsLink_c newInst = null;
    if(table.equalsIgnoreCase("R_ASSR")) { //$NON-NLS-1$
        newInst = new ClassAsLink_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
           Integer.parseInt((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_SUPER (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsSupertype_c newInst = null;
    if(table.equalsIgnoreCase("R_SUPER")) { //$NON-NLS-1$
        newInst = new ClassAsSupertype_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_SUB (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsSubtype_c newInst = null;
    if(table.equalsIgnoreCase("R_SUB")) { //$NON-NLS-1$
        newInst = new ClassAsSubtype_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_CONE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsDerivedOneSide_c newInst = null;
    if(table.equalsIgnoreCase("R_CONE")) { //$NON-NLS-1$
        newInst = new ClassAsDerivedOneSide_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_COTH (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassAsDerivedOtherSide_c newInst = null;
    if(table.equalsIgnoreCase("R_COTH")) { //$NON-NLS-1$
        newInst = new ClassAsDerivedOtherSide_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
           Integer.parseInt((String)parms.elementAt(3)), 
           Integer.parseInt((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_OIR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassInAssociation_c newInst = null;
    if(table.equalsIgnoreCase("R_OIR")) { //$NON-NLS-1$
        newInst = new ClassInAssociation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_RTO (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ReferredToClassInAssoc_c newInst = null;
    if(table.equalsIgnoreCase("R_RTO")) { //$NON-NLS-1$
        newInst = new ReferredToClassInAssoc_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
           Integer.parseInt((String)parms.elementAt(3))==99?-1:Integer.parseInt((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createR_RGO (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ReferringClassInAssoc_c newInst = null;
    if(table.equalsIgnoreCase("R_RGO")) { //$NON-NLS-1$
        newInst = new ReferringClassInAssoc_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_COMM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CommunicationPath_c newInst = null;
    if(table.equalsIgnoreCase("CA_COMM")) { //$NON-NLS-1$
        newInst = new CommunicationPath_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_EESMC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    EeToSmCommPath_c newInst = null;
    if(table.equalsIgnoreCase("CA_EESMC")) { //$NON-NLS-1$
        newInst = new EeToSmCommPath_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_SMSMC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SmToSmCommPath_c newInst = null;
    if(table.equalsIgnoreCase("CA_SMSMC")) { //$NON-NLS-1$
        UUID val4 = IdAssigner.NULL_UUID;
    if ( numParms == 5 ) {
        val4 = IdAssigner.createUUIDFromString((String) parms.elementAt(4));
    }
        newInst = new SmToSmCommPath_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
           val4, 
           IdAssigner.createUUIDFromString((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_SMEEC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SmToEeCommPath_c newInst = null;
    if(table.equalsIgnoreCase("CA_SMEEC")) { //$NON-NLS-1$
        newInst = new SmToEeCommPath_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_EESME (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    EeToSmEventComm_c newInst = null;
    if(table.equalsIgnoreCase("CA_EESME")) { //$NON-NLS-1$
        newInst = new EeToSmEventComm_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_SMSME (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SmToSmEventComm_c newInst = null;
    if(table.equalsIgnoreCase("CA_SMSME")) { //$NON-NLS-1$
        newInst = new SmToSmEventComm_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_SMEEE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SmToEeEventComm_c newInst = null;
    if(table.equalsIgnoreCase("CA_SMEEE")) { //$NON-NLS-1$
        newInst = new SmToEeEventComm_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_ACC (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    AccessPath_c newInst = null;
    if(table.equalsIgnoreCase("CA_ACC")) { //$NON-NLS-1$
        newInst = new AccessPath_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_SMOA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SmToObjAccessPath_c newInst = null;
    if(table.equalsIgnoreCase("CA_SMOA")) { //$NON-NLS-1$
        newInst = new SmToObjAccessPath_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_SMEEA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SmToEeAccessPath_c newInst = null;
    if(table.equalsIgnoreCase("CA_SMEEA")) { //$NON-NLS-1$
        newInst = new SmToEeAccessPath_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_SMOAA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SmToObjAttributeAccess_c newInst = null;
    if(table.equalsIgnoreCase("CA_SMOAA")) { //$NON-NLS-1$
        newInst = new SmToObjAttributeAccess_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createCA_SMEED (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SmToEeDataItemAccess_c newInst = null;
    if(table.equalsIgnoreCase("CA_SMEED")) { //$NON-NLS-1$
        newInst = new SmToEeDataItemAccess_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_SM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    StateMachine_c newInst = null;
    if(table.equalsIgnoreCase("SM_SM")) { //$NON-NLS-1$
        newInst = new StateMachine_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
           removeTics((String)parms.elementAt(1)), 
           Integer.parseInt((String)parms.elementAt(2))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_EVT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    StateMachineEvent_c newInst = null;
    if(table.equalsIgnoreCase("SM_EVT")) { //$NON-NLS-1$
        newInst = new StateMachineEvent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
           Integer.parseInt((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6)), 
           removeTics((String)parms.elementAt(7)), 
           removeTics((String)parms.elementAt(8))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_STATE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    StateMachineState_c newInst = null;
    if(table.equalsIgnoreCase("SM_STATE")) { //$NON-NLS-1$
        newInst = new StateMachineState_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
           removeTics((String)parms.elementAt(3)).trim(), 
           Integer.parseInt((String)parms.elementAt(4)), 
           Integer.parseInt((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_SEME (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    StateEventMatrixEntry_c newInst = null;
    if(table.equalsIgnoreCase("SM_SEME")) { //$NON-NLS-1$
        newInst = new StateEventMatrixEntry_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_EIGN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    EventIgnored_c newInst = null;
    if(table.equalsIgnoreCase("SM_EIGN")) { //$NON-NLS-1$
        newInst = new EventIgnored_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true), 
           removeTics((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_NSTXN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    NewStateTransition_c newInst = null;
    if(table.equalsIgnoreCase("SM_NSTXN")) { //$NON-NLS-1$
        newInst = new NewStateTransition_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_CH (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CantHappen_c newInst = null;
    if(table.equalsIgnoreCase("SM_CH")) { //$NON-NLS-1$
        newInst = new CantHappen_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true), 
           removeTics((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_CRTXN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    CreationTransition_c newInst = null;
    if(table.equalsIgnoreCase("SM_CRTXN")) { //$NON-NLS-1$
        newInst = new CreationTransition_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_NETXN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    NoEventTransition_c newInst = null;
    if(table.equalsIgnoreCase("SM_NETXN")) { //$NON-NLS-1$
        newInst = new NoEventTransition_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_TXN (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Transition_c newInst = null;
    if(table.equalsIgnoreCase("SM_TXN")) { //$NON-NLS-1$
        newInst = new Transition_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_MOORE (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    MooreStateMachine_c newInst = null;
    if(table.equalsIgnoreCase("SM_MOORE")) { //$NON-NLS-1$
        newInst = new MooreStateMachine_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_MEALY (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    MealyStateMachine_c newInst = null;
    if(table.equalsIgnoreCase("SM_MEALY")) { //$NON-NLS-1$
        newInst = new MealyStateMachine_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_MOAH (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    MooreActionHome_c newInst = null;
    if(table.equalsIgnoreCase("SM_MOAH")) { //$NON-NLS-1$
        newInst = new MooreActionHome_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_MEAH (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    MealyActionHome_c newInst = null;
    if(table.equalsIgnoreCase("SM_MEAH")) { //$NON-NLS-1$
        newInst = new MealyActionHome_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_AH (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ActionHome_c newInst = null;
    if(table.equalsIgnoreCase("SM_AH")) { //$NON-NLS-1$
        newInst = new ActionHome_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_ACT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Action_c newInst = null;
    if(table.equalsIgnoreCase("SM_ACT")) { //$NON-NLS-1$
        newInst = new Action_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           Integer.parseInt((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_ISM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    InstanceStateMachine_c newInst = null;
    if(table.equalsIgnoreCase("SM_ISM")) { //$NON-NLS-1$
        newInst = new InstanceStateMachine_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_ASM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassStateMachine_c newInst = null;
    if(table.equalsIgnoreCase("SM_ASM")) { //$NON-NLS-1$
        newInst = new ClassStateMachine_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_EVTDI (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    StateMachineEventDataItem_c newInst = null;
    if(table.equalsIgnoreCase("SM_EVTDI")) { //$NON-NLS-1$
    parms.setSize(5);
        newInst = new StateMachineEventDataItem_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4), true),
           "",
           IdAssigner.NULL_UUID,
           IdAssigner.NULL_UUID        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_SUPDT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    EventSupplementalData_c newInst = null;
    if(table.equalsIgnoreCase("SM_SUPDT")) { //$NON-NLS-1$
        newInst = new EventSupplementalData_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           ((String)parms.elementAt(2)).equals( "false" ) ? false : true        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_SDI (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SupplementalDataItems_c newInst = null;
    if(table.equalsIgnoreCase("SM_SDI")) { //$NON-NLS-1$
        newInst = new SupplementalDataItems_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_PEVT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    PolymorphicEvent_c newInst = null;
    if(table.equalsIgnoreCase("SM_PEVT")) { //$NON-NLS-1$
      parms.setSize(6);
        newInst = new PolymorphicEvent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_SEVT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    SemEvent_c newInst = null;
    if(table.equalsIgnoreCase("SM_SEVT")) { //$NON-NLS-1$
        newInst = new SemEvent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_NLEVT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    NonLocalEvent_c newInst = null;
    if(table.equalsIgnoreCase("SM_NLEVT")) { //$NON-NLS-1$
        newInst = new NonLocalEvent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5), true), 
           removeTics((String)parms.elementAt(6))        );
    loadedInstances.add(newInst);
      }
  }
  private void createSM_LEVT (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    LocalEvent_c newInst = null;
    if(table.equalsIgnoreCase("SM_LEVT")) { //$NON-NLS-1$
        newInst = new LocalEvent_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_TFR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Operation_c newInst = null;
    if(table.equalsIgnoreCase("O_TFR")) { //$NON-NLS-1$
    parms.setSize(8);
        newInst = new Operation_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           removeTics((String)parms.elementAt(2)).trim(), 
           removeTics((String)parms.elementAt(3)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4), true), 
           Integer.parseInt((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6)), 
           Integer.parseInt((String)parms.elementAt(7)),
           "",
           Gd_c.Null_unique_id()        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_TPARM (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    OperationParameter_c newInst = null;
    if(table.equalsIgnoreCase("O_TPARM")) { //$NON-NLS-1$
    parms.setSize(5);
        newInst = new OperationParameter_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           removeTics((String)parms.elementAt(2)).trim(), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true), 
           Integer.parseInt((String)parms.elementAt(4)),
           "",
           Gd_c.Null_unique_id(),
           ""        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_ATTR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    Attribute_c newInst = null;
    if(table.equalsIgnoreCase("O_ATTR")) { //$NON-NLS-1$
    parms.setSize(9);
        newInst = new Attribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
           removeTics((String)parms.elementAt(3)).trim(), 
           removeTics((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5)), 
           removeTics((String)parms.elementAt(6)), 
           Integer.parseInt((String)parms.elementAt(7)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(8), true),
           "",
           ""        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_OBJ (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ModelClass_c newInst = null;
    if(table.equalsIgnoreCase("O_OBJ")) { //$NON-NLS-1$
        newInst = new ModelClass_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
           removeTics((String)parms.elementAt(1)).trim(), 
           Integer.parseInt((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3)), 
           removeTics((String)parms.elementAt(4)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_BATTR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    BaseAttribute_c newInst = null;
    if(table.equalsIgnoreCase("O_BATTR")) { //$NON-NLS-1$
        newInst = new BaseAttribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_RATTR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ReferentialAttribute_c newInst = null;
    if(table.equalsIgnoreCase("O_RATTR")) { //$NON-NLS-1$
    parms.setSize(5);
        newInst = new ReferentialAttribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(2), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true), 
           Integer.parseInt((String)parms.elementAt(4)), 
           ""        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_DBATTR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    DerivedBaseAttribute_c newInst = null;
    if(table.equalsIgnoreCase("O_DBATTR")) { //$NON-NLS-1$
        newInst = new DerivedBaseAttribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           removeTics((String)parms.elementAt(2)), 
           Integer.parseInt((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_NBATTR (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    NewBaseAttribute_c newInst = null;
    if(table.equalsIgnoreCase("O_NBATTR")) { //$NON-NLS-1$
        newInst = new NewBaseAttribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_REF (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    AttributeReferenceInClass_c newInst = null;
    if(table.equalsIgnoreCase("O_REF")) { //$NON-NLS-1$
      parms.setSize(12);
        newInst = new AttributeReferenceInClass_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           Integer.parseInt((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(5), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(6), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(7), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(8), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(9), true), 
           ((String)parms.elementAt(10)).equals( "false" ) ? false : true,   //$NON-NLS-1$
           removeTics((String)parms.elementAt(11)), 
           "", 
           "", 
           ""        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_ID (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassIdentifier_c newInst = null;
    if(table.equalsIgnoreCase("O_ID")) { //$NON-NLS-1$
        newInst = new ClassIdentifier_c(modelRoot,
               Integer.parseInt((String)parms.elementAt(0)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true)        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_OIDA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ClassIdentifierAttribute_c newInst = null;
    if(table.equalsIgnoreCase("O_OIDA")) { //$NON-NLS-1$
      parms.setSize(4);
        newInst = new ClassIdentifierAttribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           Integer.parseInt((String)parms.elementAt(2)), 
           removeTics((String)parms.elementAt(3))        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_IOBJ (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ImportedClass_c newInst = null;
    if(table.equalsIgnoreCase("O_IOBJ")) { //$NON-NLS-1$
        newInst = new ImportedClass_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           Integer.parseInt((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true), 
           removeTics((String)parms.elementAt(4)), 
           removeTics((String)parms.elementAt(5))        );
    loadedInstances.add(newInst);
      }
  }
  private void createO_RTIDA (Ooaofooa modelRoot, String table, Vector parms, Vector rawParms, int numParms, IProgressMonitor pm) {
    ReferredToIdentifierAttribute_c newInst = null;
    if(table.equalsIgnoreCase("O_RTIDA")) { //$NON-NLS-1$
        newInst = new ReferredToIdentifierAttribute_c(modelRoot,
              IdAssigner.createUUIDFromString((String)parms.elementAt(0), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(1), true), 
           Integer.parseInt((String)parms.elementAt(2)), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(3), true), 
          IdAssigner.createUUIDFromString((String)parms.elementAt(4), true)        );
    loadedInstances.add(newInst);
      }
  }
    public String processValue(String table, int col_num, String val) {
      if ( table.equalsIgnoreCase("S_EE") && col_num == 7 )   // isRealized //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("SM_SUPDT") && col_num == 2 )   // Non_Local //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("O_REF") && col_num == 10 )   // Is_Cstrd //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("GD_MD") && col_num == 4 )   // UseGlobalPrint //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("GD_MD") && col_num == 5 )   // PrintMode //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("GD_MD") && col_num == 8 )   // IsLandscape //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      else if ( table.equalsIgnoreCase("GD_MD") && col_num == 13 )   // GridOn //$NON-NLS-1$
        if ( val.equals("0") )   //$NON-NLS-1$
          return "false";        //$NON-NLS-1$
        else
          return "true";         //$NON-NLS-1$
      return val;
    }
}

