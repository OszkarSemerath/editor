package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ActualParameter_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ACTUAL_PARAMETER extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ActualParameter_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ActualParameter_c(ModelRoot modelRoot, java.util.UUID p_m_value_id,
			java.util.UUID p_m_statement_id,
			java.util.UUID p_m_invocation_value_id, String p_m_name,
			java.util.UUID p_m_next_value_id, int p_m_labellinenumber,
			int p_m_labelcolumn) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
		m_name = p_m_name;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_next_value_id = IdAssigner.preprocessUUID(p_m_next_value_id);
		m_labellinenumber = p_m_labellinenumber;
		m_labelcolumn = p_m_labelcolumn;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_invocation_value_id = IdAssigner
				.preprocessUUID(p_m_invocation_value_id);

		Object[] key = {m_value_id};
		addInstanceToMap(key);
	}
	static public ActualParameter_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_statement_id,
			java.util.UUID p_m_invocation_value_id, String p_m_name,
			java.util.UUID p_m_next_value_id, int p_m_labellinenumber,
			int p_m_labelcolumn, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);
		ActualParameter_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_value_id};
			new_inst = (ActualParameter_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				new_inst.m_name = p_m_name;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_next_value_id = IdAssigner
						.preprocessUUID(p_m_next_value_id);
				new_inst.m_labellinenumber = p_m_labellinenumber;
				new_inst.m_labelcolumn = p_m_labelcolumn;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_invocation_value_id = IdAssigner
						.preprocessUUID(p_m_invocation_value_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ActualParameter_c(modelRoot, p_m_value_id,
					p_m_statement_id, p_m_invocation_value_id, p_m_name,
					p_m_next_value_id, p_m_labellinenumber, p_m_labelcolumn);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ActualParameter_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_value_id, java.util.UUID p_m_statement_id,
			java.util.UUID p_m_invocation_value_id, String p_m_name,
			java.util.UUID p_m_next_value_id, int p_m_labellinenumber,
			int p_m_labelcolumn) {
		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);
		ActualParameter_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_value_id};
			source = (ActualParameter_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				source.m_name = p_m_name;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_next_value_id = IdAssigner
						.preprocessUUID(p_m_next_value_id);
				source.m_labellinenumber = p_m_labellinenumber;
				source.m_labelcolumn = p_m_labelcolumn;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_invocation_value_id = IdAssigner
						.preprocessUUID(p_m_invocation_value_id);

				return source;
			}
		}
		// there is no instance matching the id
		ActualParameter_c new_inst = new ActualParameter_c(modelRoot,
				p_m_value_id, p_m_statement_id, p_m_invocation_value_id,
				p_m_name, p_m_next_value_id, p_m_labellinenumber,
				p_m_labelcolumn);
		return new_inst;
	}
	public ActualParameter_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_value_id = IdAssigner.NULL_UUID;
		m_statement_id = IdAssigner.NULL_UUID;
		m_name = "";
		m_next_value_id = IdAssigner.NULL_UUID;
		m_invocation_value_id = IdAssigner.NULL_UUID;
		Object[] key = {m_value_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_value_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_value_id != p_newKey) {

			m_value_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ActualParameter_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ActualParameter_c)) {
			return false;
		}

		ActualParameter_c me = (ActualParameter_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if ((IdAssigner.NULL_UUID.equals(getValue_id()) || IdAssigner.NULL_UUID
				.equals(((ActualParameter_c) elem).getValue_id()))
				&& this != elem) {
			return false;
		}
		if (!getValue_id().equals(((ActualParameter_c) elem).getValue_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ActualParameter_c)) {
			return false;
		}

		ActualParameter_c me = (ActualParameter_c) elem;
		if (!getValue_idCachedValue().equals(
				((ActualParameter_c) elem).getValue_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_value_id;
	private java.util.UUID m_statement_id;
	private String m_name;
	private java.util.UUID m_next_value_id;
	private int m_labellinenumber;
	private int m_labelcolumn;
	private java.util.UUID m_invocation_value_id;

	// declare association references from this class

	// referring navigation

	Value_c HasValue;
	public void relateAcrossR800To(Value_c target) {
		relateAcrossR800To(target, true);
	}
	public void relateAcrossR800To(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == HasValue)
			return; // already related

		if (HasValue != target) {

			Object oldKey = getInstanceKey();

			if (HasValue != null) {

				HasValue.clearBackPointerR800To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActualParameter_c.relateAcrossR800To(Value_c target)",
									"Relate performed across R800 from Actual Parameter to Value without unrelate of prior instance.");
				}
			}

			HasValue = target;
			m_value_id = target.getValue_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR800To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR800From(Value_c target) {
		unrelateAcrossR800From(target, true);
	}
	public void unrelateAcrossR800From(Value_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (HasValue == null)
			return; // already unrelated

		if (target != HasValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R800",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR800To(this);
		}

		if (HasValue != null) {

			m_value_id = HasValue.getValue_id();
			HasValue = null;
			target.removeRef();
		}
	}

	public static ActualParameter_c getOneV_PAROnR800(Value_c[] targets) {
		return getOneV_PAROnR800(targets, null);
	}

	public static ActualParameter_c getOneV_PAROnR800(Value_c[] targets,
			ClassQueryInterface_c test) {
		ActualParameter_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PAROnR800(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActualParameter_c getOneV_PAROnR800(Value_c target) {
		return getOneV_PAROnR800(target, null);
	}

	public static ActualParameter_c getOneV_PAROnR800(Value_c target,
			boolean loadComponent) {
		return getOneV_PAROnR800(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActualParameter_c getOneV_PAROnR800(Value_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PAROnR800(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActualParameter_c getOneV_PAROnR800(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test) {
		return getOneV_PAROnR800(modelRoot, target, test, true);
	}

	public static ActualParameter_c getOneV_PAROnR800(ModelRoot modelRoot,
			Value_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneV_PAROnR800(modelRoot, target, test);
	}
	private static ActualParameter_c find_getOneV_PAROnR800(
			ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ActualParameter_c source = (ActualParameter_c) target.backPointer_IsValueOfActualParameterIsValueOf_R800;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ActualParameter_c[] getManyV_PARsOnR800(Value_c[] targets) {
		return getManyV_PARsOnR800(targets, null);
	}
	public static ActualParameter_c[] getManyV_PARsOnR800(Value_c[] targets,
			boolean loadComponent) {
		return getManyV_PARsOnR800(targets, null, loadComponent);
	}
	public static ActualParameter_c[] getManyV_PARsOnR800(Value_c[] targets,
			ClassQueryInterface_c test) {
		return getManyV_PARsOnR800(targets, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR800(Value_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ActualParameter_c source = (ActualParameter_c) targets[i].backPointer_IsValueOfActualParameterIsValueOf_R800;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	public static ActualParameter_c[] getManyV_PARsOnR800(Value_c target) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_PARsOnR800(targetArray);
		} else {
			ActualParameter_c[] result = new ActualParameter_c[0];
			return result;
		}
	}

	public static ActualParameter_c[] getManyV_PARsOnR800(Value_c target,
			boolean loadComponent) {
		if (target != null) {
			Value_c[] targetArray = new Value_c[1];
			targetArray[0] = target;
			return getManyV_PARsOnR800(targetArray, loadComponent);
		} else {
			ActualParameter_c[] result = new ActualParameter_c[0];
			return result;
		}
	}

	// referring navigation

	OperationValue_c OperationValue;
	public void relateAcrossR811To(OperationValue_c target) {
		relateAcrossR811To(target, true);
	}
	public void relateAcrossR811To(OperationValue_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == OperationValue)
			return; // already related

		if (OperationValue != target) {

			Object oldKey = getInstanceKey();

			if (OperationValue != null) {

				OperationValue.clearBackPointerR811To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActualParameter_c.relateAcrossR811To(OperationValue_c target)",
									"Relate performed across R811 from Actual Parameter to Operation Value without unrelate of prior instance.");
				}
			}

			OperationValue = target;
			if (IdAssigner.NULL_UUID.equals(target.getValue_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_invocation_value_id = target.getValue_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR811To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR811From(OperationValue_c target) {
		unrelateAcrossR811From(target, true);
	}
	public void unrelateAcrossR811From(OperationValue_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (OperationValue == null)
			return; // already unrelated

		if (target != OperationValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R811",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR811To(this);
		}

		if (OperationValue != null) {

			m_invocation_value_id = OperationValue.getValue_id();
			if (IdAssigner.NULL_UUID.equals(m_invocation_value_id)) {
				m_invocation_value_id = OperationValue.getValue_idCachedValue();
			}
			OperationValue = null;
			target.removeRef();
		}
	}

	public static ActualParameter_c getOneV_PAROnR811(OperationValue_c[] targets) {
		return getOneV_PAROnR811(targets, null);
	}

	public static ActualParameter_c getOneV_PAROnR811(
			OperationValue_c[] targets, ClassQueryInterface_c test) {
		ActualParameter_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PAROnR811(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActualParameter_c getOneV_PAROnR811(OperationValue_c target) {
		return getOneV_PAROnR811(target, null);
	}

	public static ActualParameter_c getOneV_PAROnR811(OperationValue_c target,
			boolean loadComponent) {
		return getOneV_PAROnR811(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActualParameter_c getOneV_PAROnR811(OperationValue_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PAROnR811(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActualParameter_c getOneV_PAROnR811(ModelRoot modelRoot,
			OperationValue_c target, ClassQueryInterface_c test) {
		return getOneV_PAROnR811(modelRoot, target, test, true);
	}

	public static ActualParameter_c getOneV_PAROnR811(ModelRoot modelRoot,
			OperationValue_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_PAROnR811(modelRoot, target, test);
	}
	private static ActualParameter_c find_getOneV_PAROnR811(
			ModelRoot modelRoot, OperationValue_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasActualParameterHas_R811) {
				for (int i = 0; i < target.backPointer_HasActualParameterHas_R811
						.size(); ++i) {
					ActualParameter_c source = (ActualParameter_c) target.backPointer_HasActualParameterHas_R811
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ActualParameter_c[] getManyV_PARsOnR811(
			OperationValue_c[] targets) {
		return getManyV_PARsOnR811(targets, null);
	}
	public static ActualParameter_c[] getManyV_PARsOnR811(
			OperationValue_c[] targets, boolean loadComponent) {
		return getManyV_PARsOnR811(targets, null, loadComponent);
	}
	public static ActualParameter_c[] getManyV_PARsOnR811(
			OperationValue_c[] targets, ClassQueryInterface_c test) {
		return getManyV_PARsOnR811(targets, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR811(
			OperationValue_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasActualParameterHas_R811) {
				for (int j = 0; j < targets[i].backPointer_HasActualParameterHas_R811
						.size(); ++j) {
					ActualParameter_c source = (ActualParameter_c) targets[i].backPointer_HasActualParameterHas_R811
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	public static ActualParameter_c[] getManyV_PARsOnR811(
			OperationValue_c target) {
		return getManyV_PARsOnR811(target, null);
	}

	public static ActualParameter_c[] getManyV_PARsOnR811(
			OperationValue_c target, boolean loadComponent) {
		return getManyV_PARsOnR811(target, null, loadComponent);
	}

	public static ActualParameter_c[] getManyV_PARsOnR811(
			OperationValue_c target, ClassQueryInterface_c test) {
		return getManyV_PARsOnR811(target, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR811(
			OperationValue_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_HasActualParameterHas_R811) {
			for (int i = 0; i < target.backPointer_HasActualParameterHas_R811
					.size(); ++i) {
				ActualParameter_c source = (ActualParameter_c) target.backPointer_HasActualParameterHas_R811
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	// referring navigation

	MessageValue_c MessageValue;
	public void relateAcrossR842To(MessageValue_c target) {
		relateAcrossR842To(target, true);
	}
	public void relateAcrossR842To(MessageValue_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == MessageValue)
			return; // already related

		if (MessageValue != target) {

			Object oldKey = getInstanceKey();

			if (MessageValue != null) {

				MessageValue.clearBackPointerR842To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActualParameter_c.relateAcrossR842To(MessageValue_c target)",
									"Relate performed across R842 from Actual Parameter to Message Value without unrelate of prior instance.");
				}
			}

			MessageValue = target;
			if (IdAssigner.NULL_UUID.equals(target.getValue_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_invocation_value_id = target.getValue_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR842To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR842From(MessageValue_c target) {
		unrelateAcrossR842From(target, true);
	}
	public void unrelateAcrossR842From(MessageValue_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (MessageValue == null)
			return; // already unrelated

		if (target != MessageValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R842",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR842To(this);
		}

		if (MessageValue != null) {

			m_invocation_value_id = MessageValue.getValue_id();
			if (IdAssigner.NULL_UUID.equals(m_invocation_value_id)) {
				m_invocation_value_id = MessageValue.getValue_idCachedValue();
			}
			MessageValue = null;
			target.removeRef();
		}
	}

	public static ActualParameter_c getOneV_PAROnR842(MessageValue_c[] targets) {
		return getOneV_PAROnR842(targets, null);
	}

	public static ActualParameter_c getOneV_PAROnR842(MessageValue_c[] targets,
			ClassQueryInterface_c test) {
		ActualParameter_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PAROnR842(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActualParameter_c getOneV_PAROnR842(MessageValue_c target) {
		return getOneV_PAROnR842(target, null);
	}

	public static ActualParameter_c getOneV_PAROnR842(MessageValue_c target,
			boolean loadComponent) {
		return getOneV_PAROnR842(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActualParameter_c getOneV_PAROnR842(MessageValue_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PAROnR842(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActualParameter_c getOneV_PAROnR842(ModelRoot modelRoot,
			MessageValue_c target, ClassQueryInterface_c test) {
		return getOneV_PAROnR842(modelRoot, target, test, true);
	}

	public static ActualParameter_c getOneV_PAROnR842(ModelRoot modelRoot,
			MessageValue_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_PAROnR842(modelRoot, target, test);
	}
	private static ActualParameter_c find_getOneV_PAROnR842(
			ModelRoot modelRoot, MessageValue_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasActualParameterHas_R842) {
				for (int i = 0; i < target.backPointer_HasActualParameterHas_R842
						.size(); ++i) {
					ActualParameter_c source = (ActualParameter_c) target.backPointer_HasActualParameterHas_R842
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ActualParameter_c[] getManyV_PARsOnR842(
			MessageValue_c[] targets) {
		return getManyV_PARsOnR842(targets, null);
	}
	public static ActualParameter_c[] getManyV_PARsOnR842(
			MessageValue_c[] targets, boolean loadComponent) {
		return getManyV_PARsOnR842(targets, null, loadComponent);
	}
	public static ActualParameter_c[] getManyV_PARsOnR842(
			MessageValue_c[] targets, ClassQueryInterface_c test) {
		return getManyV_PARsOnR842(targets, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR842(
			MessageValue_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasActualParameterHas_R842) {
				for (int j = 0; j < targets[i].backPointer_HasActualParameterHas_R842
						.size(); ++j) {
					ActualParameter_c source = (ActualParameter_c) targets[i].backPointer_HasActualParameterHas_R842
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	public static ActualParameter_c[] getManyV_PARsOnR842(MessageValue_c target) {
		return getManyV_PARsOnR842(target, null);
	}

	public static ActualParameter_c[] getManyV_PARsOnR842(
			MessageValue_c target, boolean loadComponent) {
		return getManyV_PARsOnR842(target, null, loadComponent);
	}

	public static ActualParameter_c[] getManyV_PARsOnR842(
			MessageValue_c target, ClassQueryInterface_c test) {
		return getManyV_PARsOnR842(target, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR842(
			MessageValue_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_HasActualParameterHas_R842) {
			for (int i = 0; i < target.backPointer_HasActualParameterHas_R842
					.size(); ++i) {
				ActualParameter_c source = (ActualParameter_c) target.backPointer_HasActualParameterHas_R842
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	// referring navigation

	FunctionValue_c FunctionValue;
	public void relateAcrossR817To(FunctionValue_c target) {
		relateAcrossR817To(target, true);
	}
	public void relateAcrossR817To(FunctionValue_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == FunctionValue)
			return; // already related

		if (FunctionValue != target) {

			Object oldKey = getInstanceKey();

			if (FunctionValue != null) {

				FunctionValue.clearBackPointerR817To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActualParameter_c.relateAcrossR817To(FunctionValue_c target)",
									"Relate performed across R817 from Actual Parameter to Function Value without unrelate of prior instance.");
				}
			}

			FunctionValue = target;
			if (IdAssigner.NULL_UUID.equals(target.getValue_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_invocation_value_id = target.getValue_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR817To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR817From(FunctionValue_c target) {
		unrelateAcrossR817From(target, true);
	}
	public void unrelateAcrossR817From(FunctionValue_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (FunctionValue == null)
			return; // already unrelated

		if (target != FunctionValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R817",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR817To(this);
		}

		if (FunctionValue != null) {

			m_invocation_value_id = FunctionValue.getValue_id();
			if (IdAssigner.NULL_UUID.equals(m_invocation_value_id)) {
				m_invocation_value_id = FunctionValue.getValue_idCachedValue();
			}
			FunctionValue = null;
			target.removeRef();
		}
	}

	public static ActualParameter_c getOneV_PAROnR817(FunctionValue_c[] targets) {
		return getOneV_PAROnR817(targets, null);
	}

	public static ActualParameter_c getOneV_PAROnR817(
			FunctionValue_c[] targets, ClassQueryInterface_c test) {
		ActualParameter_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PAROnR817(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActualParameter_c getOneV_PAROnR817(FunctionValue_c target) {
		return getOneV_PAROnR817(target, null);
	}

	public static ActualParameter_c getOneV_PAROnR817(FunctionValue_c target,
			boolean loadComponent) {
		return getOneV_PAROnR817(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActualParameter_c getOneV_PAROnR817(FunctionValue_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PAROnR817(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActualParameter_c getOneV_PAROnR817(ModelRoot modelRoot,
			FunctionValue_c target, ClassQueryInterface_c test) {
		return getOneV_PAROnR817(modelRoot, target, test, true);
	}

	public static ActualParameter_c getOneV_PAROnR817(ModelRoot modelRoot,
			FunctionValue_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_PAROnR817(modelRoot, target, test);
	}
	private static ActualParameter_c find_getOneV_PAROnR817(
			ModelRoot modelRoot, FunctionValue_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasActualParameterHas_R817) {
				for (int i = 0; i < target.backPointer_HasActualParameterHas_R817
						.size(); ++i) {
					ActualParameter_c source = (ActualParameter_c) target.backPointer_HasActualParameterHas_R817
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ActualParameter_c[] getManyV_PARsOnR817(
			FunctionValue_c[] targets) {
		return getManyV_PARsOnR817(targets, null);
	}
	public static ActualParameter_c[] getManyV_PARsOnR817(
			FunctionValue_c[] targets, boolean loadComponent) {
		return getManyV_PARsOnR817(targets, null, loadComponent);
	}
	public static ActualParameter_c[] getManyV_PARsOnR817(
			FunctionValue_c[] targets, ClassQueryInterface_c test) {
		return getManyV_PARsOnR817(targets, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR817(
			FunctionValue_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasActualParameterHas_R817) {
				for (int j = 0; j < targets[i].backPointer_HasActualParameterHas_R817
						.size(); ++j) {
					ActualParameter_c source = (ActualParameter_c) targets[i].backPointer_HasActualParameterHas_R817
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	public static ActualParameter_c[] getManyV_PARsOnR817(FunctionValue_c target) {
		return getManyV_PARsOnR817(target, null);
	}

	public static ActualParameter_c[] getManyV_PARsOnR817(
			FunctionValue_c target, boolean loadComponent) {
		return getManyV_PARsOnR817(target, null, loadComponent);
	}

	public static ActualParameter_c[] getManyV_PARsOnR817(
			FunctionValue_c target, ClassQueryInterface_c test) {
		return getManyV_PARsOnR817(target, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR817(
			FunctionValue_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_HasActualParameterHas_R817) {
			for (int i = 0; i < target.backPointer_HasActualParameterHas_R817
					.size(); ++i) {
				ActualParameter_c source = (ActualParameter_c) target.backPointer_HasActualParameterHas_R817
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	// referring navigation

	BridgeValue_c BridgeValue;
	public void relateAcrossR810To(BridgeValue_c target) {
		relateAcrossR810To(target, true);
	}
	public void relateAcrossR810To(BridgeValue_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == BridgeValue)
			return; // already related

		if (BridgeValue != target) {

			Object oldKey = getInstanceKey();

			if (BridgeValue != null) {

				BridgeValue.clearBackPointerR810To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActualParameter_c.relateAcrossR810To(BridgeValue_c target)",
									"Relate performed across R810 from Actual Parameter to Bridge Value without unrelate of prior instance.");
				}
			}

			BridgeValue = target;
			if (IdAssigner.NULL_UUID.equals(target.getValue_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_invocation_value_id = target.getValue_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR810To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR810From(BridgeValue_c target) {
		unrelateAcrossR810From(target, true);
	}
	public void unrelateAcrossR810From(BridgeValue_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (BridgeValue == null)
			return; // already unrelated

		if (target != BridgeValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R810",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR810To(this);
		}

		if (BridgeValue != null) {

			m_invocation_value_id = BridgeValue.getValue_id();
			if (IdAssigner.NULL_UUID.equals(m_invocation_value_id)) {
				m_invocation_value_id = BridgeValue.getValue_idCachedValue();
			}
			BridgeValue = null;
			target.removeRef();
		}
	}

	public static ActualParameter_c getOneV_PAROnR810(BridgeValue_c[] targets) {
		return getOneV_PAROnR810(targets, null);
	}

	public static ActualParameter_c getOneV_PAROnR810(BridgeValue_c[] targets,
			ClassQueryInterface_c test) {
		ActualParameter_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PAROnR810(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActualParameter_c getOneV_PAROnR810(BridgeValue_c target) {
		return getOneV_PAROnR810(target, null);
	}

	public static ActualParameter_c getOneV_PAROnR810(BridgeValue_c target,
			boolean loadComponent) {
		return getOneV_PAROnR810(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActualParameter_c getOneV_PAROnR810(BridgeValue_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PAROnR810(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActualParameter_c getOneV_PAROnR810(ModelRoot modelRoot,
			BridgeValue_c target, ClassQueryInterface_c test) {
		return getOneV_PAROnR810(modelRoot, target, test, true);
	}

	public static ActualParameter_c getOneV_PAROnR810(ModelRoot modelRoot,
			BridgeValue_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_PAROnR810(modelRoot, target, test);
	}
	private static ActualParameter_c find_getOneV_PAROnR810(
			ModelRoot modelRoot, BridgeValue_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasActualParameterHas_R810) {
				for (int i = 0; i < target.backPointer_HasActualParameterHas_R810
						.size(); ++i) {
					ActualParameter_c source = (ActualParameter_c) target.backPointer_HasActualParameterHas_R810
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ActualParameter_c[] getManyV_PARsOnR810(
			BridgeValue_c[] targets) {
		return getManyV_PARsOnR810(targets, null);
	}
	public static ActualParameter_c[] getManyV_PARsOnR810(
			BridgeValue_c[] targets, boolean loadComponent) {
		return getManyV_PARsOnR810(targets, null, loadComponent);
	}
	public static ActualParameter_c[] getManyV_PARsOnR810(
			BridgeValue_c[] targets, ClassQueryInterface_c test) {
		return getManyV_PARsOnR810(targets, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR810(
			BridgeValue_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasActualParameterHas_R810) {
				for (int j = 0; j < targets[i].backPointer_HasActualParameterHas_R810
						.size(); ++j) {
					ActualParameter_c source = (ActualParameter_c) targets[i].backPointer_HasActualParameterHas_R810
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	public static ActualParameter_c[] getManyV_PARsOnR810(BridgeValue_c target) {
		return getManyV_PARsOnR810(target, null);
	}

	public static ActualParameter_c[] getManyV_PARsOnR810(BridgeValue_c target,
			boolean loadComponent) {
		return getManyV_PARsOnR810(target, null, loadComponent);
	}

	public static ActualParameter_c[] getManyV_PARsOnR810(BridgeValue_c target,
			ClassQueryInterface_c test) {
		return getManyV_PARsOnR810(target, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR810(BridgeValue_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_HasActualParameterHas_R810) {
			for (int i = 0; i < target.backPointer_HasActualParameterHas_R810
					.size(); ++i) {
				ActualParameter_c source = (ActualParameter_c) target.backPointer_HasActualParameterHas_R810
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	// referring navigation

	ActualParameter_c PrecedesActualParameter;
	public void relateAcrossR816ToPrecedes(ActualParameter_c target) {
		relateAcrossR816ToPrecedes(target, true);
	}
	public void relateAcrossR816ToPrecedes(ActualParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == PrecedesActualParameter)
			return; // already related

		if (PrecedesActualParameter != target) {

			Object oldKey = getInstanceKey();

			if (PrecedesActualParameter != null) {

				PrecedesActualParameter.clearBackPointerR816ToSucceeds(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActualParameter_c.relateAcrossR816ToPrecedes(ActualParameter_c target)",
									"Relate performed across R816 from Actual Parameter to Actual Parameter without unrelate of prior instance.");
				}
			}

			PrecedesActualParameter = target;
			if (IdAssigner.NULL_UUID.equals(target.getValue_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_next_value_id = target.getValue_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR816ToSucceeds(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR816FromPrecedes(ActualParameter_c target) {
		unrelateAcrossR816FromPrecedes(target, true);
	}
	public void unrelateAcrossR816FromPrecedes(ActualParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (PrecedesActualParameter == null)
			return; // already unrelated

		if (target != PrecedesActualParameter) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R816",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR816ToSucceeds(this);
		}

		if (PrecedesActualParameter != null) {

			m_next_value_id = PrecedesActualParameter.getValue_id();
			if (IdAssigner.NULL_UUID.equals(m_next_value_id)) {
				m_next_value_id = PrecedesActualParameter
						.getValue_idCachedValue();
			}
			PrecedesActualParameter = null;
			target.removeRef();
		}
	}

	public static ActualParameter_c getOneV_PAROnR816Succeeds(
			ActualParameter_c[] targets) {
		return getOneV_PAROnR816Succeeds(targets, null);
	}

	public static ActualParameter_c getOneV_PAROnR816Succeeds(
			ActualParameter_c[] targets, ClassQueryInterface_c test) {
		ActualParameter_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PAROnR816Succeeds(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActualParameter_c getOneV_PAROnR816Succeeds(
			ActualParameter_c target) {
		return getOneV_PAROnR816Succeeds(target, null);
	}

	public static ActualParameter_c getOneV_PAROnR816Succeeds(
			ActualParameter_c target, boolean loadComponent) {
		return getOneV_PAROnR816Succeeds(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActualParameter_c getOneV_PAROnR816Succeeds(
			ActualParameter_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PAROnR816Succeeds(target.getModelRoot(), target,
					test);
		}
		return null;
	}

	public static ActualParameter_c getOneV_PAROnR816Succeeds(
			ModelRoot modelRoot, ActualParameter_c target,
			ClassQueryInterface_c test) {
		return getOneV_PAROnR816Succeeds(modelRoot, target, test, true);
	}

	public static ActualParameter_c getOneV_PAROnR816Succeeds(
			ModelRoot modelRoot, ActualParameter_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneV_PAROnR816Succeeds(modelRoot, target, test);
	}
	private static ActualParameter_c find_getOneV_PAROnR816Succeeds(
			ModelRoot modelRoot, ActualParameter_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			ActualParameter_c source = (ActualParameter_c) target.backPointer_SucceedsActualParameterSucceeds_R816;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ActualParameter_c[] getManyV_PARsOnR816Succeeds(
			ActualParameter_c[] targets) {
		return getManyV_PARsOnR816Succeeds(targets, null);
	}
	public static ActualParameter_c[] getManyV_PARsOnR816Succeeds(
			ActualParameter_c[] targets, boolean loadComponent) {
		return getManyV_PARsOnR816Succeeds(targets, null, loadComponent);
	}
	public static ActualParameter_c[] getManyV_PARsOnR816Succeeds(
			ActualParameter_c[] targets, ClassQueryInterface_c test) {
		return getManyV_PARsOnR816Succeeds(targets, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR816Succeeds(
			ActualParameter_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ActualParameter_c source = (ActualParameter_c) targets[i].backPointer_SucceedsActualParameterSucceeds_R816;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	public static ActualParameter_c[] getManyV_PARsOnR816Succeeds(
			ActualParameter_c target) {
		if (target != null) {
			ActualParameter_c[] targetArray = new ActualParameter_c[1];
			targetArray[0] = target;
			return getManyV_PARsOnR816Succeeds(targetArray);
		} else {
			ActualParameter_c[] result = new ActualParameter_c[0];
			return result;
		}
	}

	public static ActualParameter_c[] getManyV_PARsOnR816Succeeds(
			ActualParameter_c target, boolean loadComponent) {
		if (target != null) {
			ActualParameter_c[] targetArray = new ActualParameter_c[1];
			targetArray[0] = target;
			return getManyV_PARsOnR816Succeeds(targetArray, loadComponent);
		} else {
			ActualParameter_c[] result = new ActualParameter_c[0];
			return result;
		}
	}

	// referring navigation

	FunctionInvocation_c FunctionInvocation;
	public void relateAcrossR669To(FunctionInvocation_c target) {
		relateAcrossR669To(target, true);
	}
	public void relateAcrossR669To(FunctionInvocation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == FunctionInvocation)
			return; // already related

		if (FunctionInvocation != target) {

			Object oldKey = getInstanceKey();

			if (FunctionInvocation != null) {

				FunctionInvocation.clearBackPointerR669To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActualParameter_c.relateAcrossR669To(FunctionInvocation_c target)",
									"Relate performed across R669 from Actual Parameter to Function Invocation without unrelate of prior instance.");
				}
			}

			FunctionInvocation = target;
			if (IdAssigner.NULL_UUID.equals(target.getStatement_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_statement_id = target.getStatement_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR669To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR669From(FunctionInvocation_c target) {
		unrelateAcrossR669From(target, true);
	}
	public void unrelateAcrossR669From(FunctionInvocation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (FunctionInvocation == null)
			return; // already unrelated

		if (target != FunctionInvocation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R669",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR669To(this);
		}

		if (FunctionInvocation != null) {

			m_statement_id = FunctionInvocation.getStatement_id();
			if (IdAssigner.NULL_UUID.equals(m_statement_id)) {
				m_statement_id = FunctionInvocation
						.getStatement_idCachedValue();
			}
			FunctionInvocation = null;
			target.removeRef();
		}
	}

	public static ActualParameter_c getOneV_PAROnR669(
			FunctionInvocation_c[] targets) {
		return getOneV_PAROnR669(targets, null);
	}

	public static ActualParameter_c getOneV_PAROnR669(
			FunctionInvocation_c[] targets, ClassQueryInterface_c test) {
		ActualParameter_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PAROnR669(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActualParameter_c getOneV_PAROnR669(
			FunctionInvocation_c target) {
		return getOneV_PAROnR669(target, null);
	}

	public static ActualParameter_c getOneV_PAROnR669(
			FunctionInvocation_c target, boolean loadComponent) {
		return getOneV_PAROnR669(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActualParameter_c getOneV_PAROnR669(
			FunctionInvocation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PAROnR669(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActualParameter_c getOneV_PAROnR669(ModelRoot modelRoot,
			FunctionInvocation_c target, ClassQueryInterface_c test) {
		return getOneV_PAROnR669(modelRoot, target, test, true);
	}

	public static ActualParameter_c getOneV_PAROnR669(ModelRoot modelRoot,
			FunctionInvocation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_PAROnR669(modelRoot, target, test);
	}
	private static ActualParameter_c find_getOneV_PAROnR669(
			ModelRoot modelRoot, FunctionInvocation_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_TakesActualParameterTakes_R669) {
				for (int i = 0; i < target.backPointer_TakesActualParameterTakes_R669
						.size(); ++i) {
					ActualParameter_c source = (ActualParameter_c) target.backPointer_TakesActualParameterTakes_R669
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ActualParameter_c[] getManyV_PARsOnR669(
			FunctionInvocation_c[] targets) {
		return getManyV_PARsOnR669(targets, null);
	}
	public static ActualParameter_c[] getManyV_PARsOnR669(
			FunctionInvocation_c[] targets, boolean loadComponent) {
		return getManyV_PARsOnR669(targets, null, loadComponent);
	}
	public static ActualParameter_c[] getManyV_PARsOnR669(
			FunctionInvocation_c[] targets, ClassQueryInterface_c test) {
		return getManyV_PARsOnR669(targets, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR669(
			FunctionInvocation_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_TakesActualParameterTakes_R669) {
				for (int j = 0; j < targets[i].backPointer_TakesActualParameterTakes_R669
						.size(); ++j) {
					ActualParameter_c source = (ActualParameter_c) targets[i].backPointer_TakesActualParameterTakes_R669
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	public static ActualParameter_c[] getManyV_PARsOnR669(
			FunctionInvocation_c target) {
		return getManyV_PARsOnR669(target, null);
	}

	public static ActualParameter_c[] getManyV_PARsOnR669(
			FunctionInvocation_c target, boolean loadComponent) {
		return getManyV_PARsOnR669(target, null, loadComponent);
	}

	public static ActualParameter_c[] getManyV_PARsOnR669(
			FunctionInvocation_c target, ClassQueryInterface_c test) {
		return getManyV_PARsOnR669(target, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR669(
			FunctionInvocation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_TakesActualParameterTakes_R669) {
			for (int i = 0; i < target.backPointer_TakesActualParameterTakes_R669
					.size(); ++i) {
				ActualParameter_c source = (ActualParameter_c) target.backPointer_TakesActualParameterTakes_R669
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	// referring navigation

	BridgeInvocation_c BridgeInvocation;
	public void relateAcrossR628To(BridgeInvocation_c target) {
		relateAcrossR628To(target, true);
	}
	public void relateAcrossR628To(BridgeInvocation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == BridgeInvocation)
			return; // already related

		if (BridgeInvocation != target) {

			Object oldKey = getInstanceKey();

			if (BridgeInvocation != null) {

				BridgeInvocation.clearBackPointerR628To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActualParameter_c.relateAcrossR628To(BridgeInvocation_c target)",
									"Relate performed across R628 from Actual Parameter to Bridge Invocation without unrelate of prior instance.");
				}
			}

			BridgeInvocation = target;
			if (IdAssigner.NULL_UUID.equals(target.getStatement_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_statement_id = target.getStatement_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR628To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR628From(BridgeInvocation_c target) {
		unrelateAcrossR628From(target, true);
	}
	public void unrelateAcrossR628From(BridgeInvocation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (BridgeInvocation == null)
			return; // already unrelated

		if (target != BridgeInvocation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R628",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR628To(this);
		}

		if (BridgeInvocation != null) {

			m_statement_id = BridgeInvocation.getStatement_id();
			if (IdAssigner.NULL_UUID.equals(m_statement_id)) {
				m_statement_id = BridgeInvocation.getStatement_idCachedValue();
			}
			BridgeInvocation = null;
			target.removeRef();
		}
	}

	public static ActualParameter_c getOneV_PAROnR628(
			BridgeInvocation_c[] targets) {
		return getOneV_PAROnR628(targets, null);
	}

	public static ActualParameter_c getOneV_PAROnR628(
			BridgeInvocation_c[] targets, ClassQueryInterface_c test) {
		ActualParameter_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PAROnR628(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActualParameter_c getOneV_PAROnR628(BridgeInvocation_c target) {
		return getOneV_PAROnR628(target, null);
	}

	public static ActualParameter_c getOneV_PAROnR628(
			BridgeInvocation_c target, boolean loadComponent) {
		return getOneV_PAROnR628(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActualParameter_c getOneV_PAROnR628(
			BridgeInvocation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PAROnR628(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActualParameter_c getOneV_PAROnR628(ModelRoot modelRoot,
			BridgeInvocation_c target, ClassQueryInterface_c test) {
		return getOneV_PAROnR628(modelRoot, target, test, true);
	}

	public static ActualParameter_c getOneV_PAROnR628(ModelRoot modelRoot,
			BridgeInvocation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_PAROnR628(modelRoot, target, test);
	}
	private static ActualParameter_c find_getOneV_PAROnR628(
			ModelRoot modelRoot, BridgeInvocation_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_TakesActualParameterTakes_R628) {
				for (int i = 0; i < target.backPointer_TakesActualParameterTakes_R628
						.size(); ++i) {
					ActualParameter_c source = (ActualParameter_c) target.backPointer_TakesActualParameterTakes_R628
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ActualParameter_c[] getManyV_PARsOnR628(
			BridgeInvocation_c[] targets) {
		return getManyV_PARsOnR628(targets, null);
	}
	public static ActualParameter_c[] getManyV_PARsOnR628(
			BridgeInvocation_c[] targets, boolean loadComponent) {
		return getManyV_PARsOnR628(targets, null, loadComponent);
	}
	public static ActualParameter_c[] getManyV_PARsOnR628(
			BridgeInvocation_c[] targets, ClassQueryInterface_c test) {
		return getManyV_PARsOnR628(targets, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR628(
			BridgeInvocation_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_TakesActualParameterTakes_R628) {
				for (int j = 0; j < targets[i].backPointer_TakesActualParameterTakes_R628
						.size(); ++j) {
					ActualParameter_c source = (ActualParameter_c) targets[i].backPointer_TakesActualParameterTakes_R628
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	public static ActualParameter_c[] getManyV_PARsOnR628(
			BridgeInvocation_c target) {
		return getManyV_PARsOnR628(target, null);
	}

	public static ActualParameter_c[] getManyV_PARsOnR628(
			BridgeInvocation_c target, boolean loadComponent) {
		return getManyV_PARsOnR628(target, null, loadComponent);
	}

	public static ActualParameter_c[] getManyV_PARsOnR628(
			BridgeInvocation_c target, ClassQueryInterface_c test) {
		return getManyV_PARsOnR628(target, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR628(
			BridgeInvocation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_TakesActualParameterTakes_R628) {
			for (int i = 0; i < target.backPointer_TakesActualParameterTakes_R628
					.size(); ++i) {
				ActualParameter_c source = (ActualParameter_c) target.backPointer_TakesActualParameterTakes_R628
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	// referring navigation

	OperationInvocation_c OperationInvocation;
	public void relateAcrossR627To(OperationInvocation_c target) {
		relateAcrossR627To(target, true);
	}
	public void relateAcrossR627To(OperationInvocation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == OperationInvocation)
			return; // already related

		if (OperationInvocation != target) {

			Object oldKey = getInstanceKey();

			if (OperationInvocation != null) {

				OperationInvocation.clearBackPointerR627To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActualParameter_c.relateAcrossR627To(OperationInvocation_c target)",
									"Relate performed across R627 from Actual Parameter to Operation Invocation without unrelate of prior instance.");
				}
			}

			OperationInvocation = target;
			if (IdAssigner.NULL_UUID.equals(target.getStatement_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_statement_id = target.getStatement_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR627To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR627From(OperationInvocation_c target) {
		unrelateAcrossR627From(target, true);
	}
	public void unrelateAcrossR627From(OperationInvocation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (OperationInvocation == null)
			return; // already unrelated

		if (target != OperationInvocation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R627",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR627To(this);
		}

		if (OperationInvocation != null) {

			m_statement_id = OperationInvocation.getStatement_id();
			if (IdAssigner.NULL_UUID.equals(m_statement_id)) {
				m_statement_id = OperationInvocation
						.getStatement_idCachedValue();
			}
			OperationInvocation = null;
			target.removeRef();
		}
	}

	public static ActualParameter_c getOneV_PAROnR627(
			OperationInvocation_c[] targets) {
		return getOneV_PAROnR627(targets, null);
	}

	public static ActualParameter_c getOneV_PAROnR627(
			OperationInvocation_c[] targets, ClassQueryInterface_c test) {
		ActualParameter_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PAROnR627(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActualParameter_c getOneV_PAROnR627(
			OperationInvocation_c target) {
		return getOneV_PAROnR627(target, null);
	}

	public static ActualParameter_c getOneV_PAROnR627(
			OperationInvocation_c target, boolean loadComponent) {
		return getOneV_PAROnR627(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActualParameter_c getOneV_PAROnR627(
			OperationInvocation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PAROnR627(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActualParameter_c getOneV_PAROnR627(ModelRoot modelRoot,
			OperationInvocation_c target, ClassQueryInterface_c test) {
		return getOneV_PAROnR627(modelRoot, target, test, true);
	}

	public static ActualParameter_c getOneV_PAROnR627(ModelRoot modelRoot,
			OperationInvocation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_PAROnR627(modelRoot, target, test);
	}
	private static ActualParameter_c find_getOneV_PAROnR627(
			ModelRoot modelRoot, OperationInvocation_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_TakesActualParameterTakes_R627) {
				for (int i = 0; i < target.backPointer_TakesActualParameterTakes_R627
						.size(); ++i) {
					ActualParameter_c source = (ActualParameter_c) target.backPointer_TakesActualParameterTakes_R627
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ActualParameter_c[] getManyV_PARsOnR627(
			OperationInvocation_c[] targets) {
		return getManyV_PARsOnR627(targets, null);
	}
	public static ActualParameter_c[] getManyV_PARsOnR627(
			OperationInvocation_c[] targets, boolean loadComponent) {
		return getManyV_PARsOnR627(targets, null, loadComponent);
	}
	public static ActualParameter_c[] getManyV_PARsOnR627(
			OperationInvocation_c[] targets, ClassQueryInterface_c test) {
		return getManyV_PARsOnR627(targets, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR627(
			OperationInvocation_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_TakesActualParameterTakes_R627) {
				for (int j = 0; j < targets[i].backPointer_TakesActualParameterTakes_R627
						.size(); ++j) {
					ActualParameter_c source = (ActualParameter_c) targets[i].backPointer_TakesActualParameterTakes_R627
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	public static ActualParameter_c[] getManyV_PARsOnR627(
			OperationInvocation_c target) {
		return getManyV_PARsOnR627(target, null);
	}

	public static ActualParameter_c[] getManyV_PARsOnR627(
			OperationInvocation_c target, boolean loadComponent) {
		return getManyV_PARsOnR627(target, null, loadComponent);
	}

	public static ActualParameter_c[] getManyV_PARsOnR627(
			OperationInvocation_c target, ClassQueryInterface_c test) {
		return getManyV_PARsOnR627(target, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR627(
			OperationInvocation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_TakesActualParameterTakes_R627) {
			for (int i = 0; i < target.backPointer_TakesActualParameterTakes_R627
					.size(); ++i) {
				ActualParameter_c source = (ActualParameter_c) target.backPointer_TakesActualParameterTakes_R627
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	// referring navigation

	InterfaceOperationInvocation_c TakenByInterfaceOperationInvocation;
	public void relateAcrossR679To(InterfaceOperationInvocation_c target) {
		relateAcrossR679To(target, true);
	}
	public void relateAcrossR679To(InterfaceOperationInvocation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == TakenByInterfaceOperationInvocation)
			return; // already related

		if (TakenByInterfaceOperationInvocation != target) {

			Object oldKey = getInstanceKey();

			if (TakenByInterfaceOperationInvocation != null) {

				TakenByInterfaceOperationInvocation
						.clearBackPointerR679To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActualParameter_c.relateAcrossR679To(InterfaceOperationInvocation_c target)",
									"Relate performed across R679 from Actual Parameter to Interface Operation Invocation without unrelate of prior instance.");
				}
			}

			TakenByInterfaceOperationInvocation = target;
			if (IdAssigner.NULL_UUID.equals(target.getStatement_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_statement_id = target.getStatement_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR679To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR679From(InterfaceOperationInvocation_c target) {
		unrelateAcrossR679From(target, true);
	}
	public void unrelateAcrossR679From(InterfaceOperationInvocation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (TakenByInterfaceOperationInvocation == null)
			return; // already unrelated

		if (target != TakenByInterfaceOperationInvocation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R679",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR679To(this);
		}

		if (TakenByInterfaceOperationInvocation != null) {

			m_statement_id = TakenByInterfaceOperationInvocation
					.getStatement_id();
			if (IdAssigner.NULL_UUID.equals(m_statement_id)) {
				m_statement_id = TakenByInterfaceOperationInvocation
						.getStatement_idCachedValue();
			}
			TakenByInterfaceOperationInvocation = null;
			target.removeRef();
		}
	}

	public static ActualParameter_c getOneV_PAROnR679(
			InterfaceOperationInvocation_c[] targets) {
		return getOneV_PAROnR679(targets, null);
	}

	public static ActualParameter_c getOneV_PAROnR679(
			InterfaceOperationInvocation_c[] targets, ClassQueryInterface_c test) {
		ActualParameter_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PAROnR679(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActualParameter_c getOneV_PAROnR679(
			InterfaceOperationInvocation_c target) {
		return getOneV_PAROnR679(target, null);
	}

	public static ActualParameter_c getOneV_PAROnR679(
			InterfaceOperationInvocation_c target, boolean loadComponent) {
		return getOneV_PAROnR679(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActualParameter_c getOneV_PAROnR679(
			InterfaceOperationInvocation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PAROnR679(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActualParameter_c getOneV_PAROnR679(ModelRoot modelRoot,
			InterfaceOperationInvocation_c target, ClassQueryInterface_c test) {
		return getOneV_PAROnR679(modelRoot, target, test, true);
	}

	public static ActualParameter_c getOneV_PAROnR679(ModelRoot modelRoot,
			InterfaceOperationInvocation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_PAROnR679(modelRoot, target, test);
	}
	private static ActualParameter_c find_getOneV_PAROnR679(
			ModelRoot modelRoot, InterfaceOperationInvocation_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_TakesActualParameterTakes_R679) {
				for (int i = 0; i < target.backPointer_TakesActualParameterTakes_R679
						.size(); ++i) {
					ActualParameter_c source = (ActualParameter_c) target.backPointer_TakesActualParameterTakes_R679
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ActualParameter_c[] getManyV_PARsOnR679(
			InterfaceOperationInvocation_c[] targets) {
		return getManyV_PARsOnR679(targets, null);
	}
	public static ActualParameter_c[] getManyV_PARsOnR679(
			InterfaceOperationInvocation_c[] targets, boolean loadComponent) {
		return getManyV_PARsOnR679(targets, null, loadComponent);
	}
	public static ActualParameter_c[] getManyV_PARsOnR679(
			InterfaceOperationInvocation_c[] targets, ClassQueryInterface_c test) {
		return getManyV_PARsOnR679(targets, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR679(
			InterfaceOperationInvocation_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_TakesActualParameterTakes_R679) {
				for (int j = 0; j < targets[i].backPointer_TakesActualParameterTakes_R679
						.size(); ++j) {
					ActualParameter_c source = (ActualParameter_c) targets[i].backPointer_TakesActualParameterTakes_R679
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	public static ActualParameter_c[] getManyV_PARsOnR679(
			InterfaceOperationInvocation_c target) {
		return getManyV_PARsOnR679(target, null);
	}

	public static ActualParameter_c[] getManyV_PARsOnR679(
			InterfaceOperationInvocation_c target, boolean loadComponent) {
		return getManyV_PARsOnR679(target, null, loadComponent);
	}

	public static ActualParameter_c[] getManyV_PARsOnR679(
			InterfaceOperationInvocation_c target, ClassQueryInterface_c test) {
		return getManyV_PARsOnR679(target, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR679(
			InterfaceOperationInvocation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_TakesActualParameterTakes_R679) {
			for (int i = 0; i < target.backPointer_TakesActualParameterTakes_R679
					.size(); ++i) {
				ActualParameter_c source = (ActualParameter_c) target.backPointer_TakesActualParameterTakes_R679
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	// referring navigation

	SignalInvocation_c TakenBySignalInvocation;
	public void relateAcrossR662To(SignalInvocation_c target) {
		relateAcrossR662To(target, true);
	}
	public void relateAcrossR662To(SignalInvocation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == TakenBySignalInvocation)
			return; // already related

		if (TakenBySignalInvocation != target) {

			Object oldKey = getInstanceKey();

			if (TakenBySignalInvocation != null) {

				TakenBySignalInvocation.clearBackPointerR662To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActualParameter_c.relateAcrossR662To(SignalInvocation_c target)",
									"Relate performed across R662 from Actual Parameter to Signal Invocation without unrelate of prior instance.");
				}
			}

			TakenBySignalInvocation = target;
			if (IdAssigner.NULL_UUID.equals(target.getStatement_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_statement_id = target.getStatement_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR662To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR662From(SignalInvocation_c target) {
		unrelateAcrossR662From(target, true);
	}
	public void unrelateAcrossR662From(SignalInvocation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (TakenBySignalInvocation == null)
			return; // already unrelated

		if (target != TakenBySignalInvocation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R662",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR662To(this);
		}

		if (TakenBySignalInvocation != null) {

			m_statement_id = TakenBySignalInvocation.getStatement_id();
			if (IdAssigner.NULL_UUID.equals(m_statement_id)) {
				m_statement_id = TakenBySignalInvocation
						.getStatement_idCachedValue();
			}
			TakenBySignalInvocation = null;
			target.removeRef();
		}
	}

	public static ActualParameter_c getOneV_PAROnR662(
			SignalInvocation_c[] targets) {
		return getOneV_PAROnR662(targets, null);
	}

	public static ActualParameter_c getOneV_PAROnR662(
			SignalInvocation_c[] targets, ClassQueryInterface_c test) {
		ActualParameter_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PAROnR662(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActualParameter_c getOneV_PAROnR662(SignalInvocation_c target) {
		return getOneV_PAROnR662(target, null);
	}

	public static ActualParameter_c getOneV_PAROnR662(
			SignalInvocation_c target, boolean loadComponent) {
		return getOneV_PAROnR662(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActualParameter_c getOneV_PAROnR662(
			SignalInvocation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PAROnR662(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActualParameter_c getOneV_PAROnR662(ModelRoot modelRoot,
			SignalInvocation_c target, ClassQueryInterface_c test) {
		return getOneV_PAROnR662(modelRoot, target, test, true);
	}

	public static ActualParameter_c getOneV_PAROnR662(ModelRoot modelRoot,
			SignalInvocation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_PAROnR662(modelRoot, target, test);
	}
	private static ActualParameter_c find_getOneV_PAROnR662(
			ModelRoot modelRoot, SignalInvocation_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_TakesActualParameterTakes_R662) {
				for (int i = 0; i < target.backPointer_TakesActualParameterTakes_R662
						.size(); ++i) {
					ActualParameter_c source = (ActualParameter_c) target.backPointer_TakesActualParameterTakes_R662
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ActualParameter_c[] getManyV_PARsOnR662(
			SignalInvocation_c[] targets) {
		return getManyV_PARsOnR662(targets, null);
	}
	public static ActualParameter_c[] getManyV_PARsOnR662(
			SignalInvocation_c[] targets, boolean loadComponent) {
		return getManyV_PARsOnR662(targets, null, loadComponent);
	}
	public static ActualParameter_c[] getManyV_PARsOnR662(
			SignalInvocation_c[] targets, ClassQueryInterface_c test) {
		return getManyV_PARsOnR662(targets, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR662(
			SignalInvocation_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_TakesActualParameterTakes_R662) {
				for (int j = 0; j < targets[i].backPointer_TakesActualParameterTakes_R662
						.size(); ++j) {
					ActualParameter_c source = (ActualParameter_c) targets[i].backPointer_TakesActualParameterTakes_R662
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	public static ActualParameter_c[] getManyV_PARsOnR662(
			SignalInvocation_c target) {
		return getManyV_PARsOnR662(target, null);
	}

	public static ActualParameter_c[] getManyV_PARsOnR662(
			SignalInvocation_c target, boolean loadComponent) {
		return getManyV_PARsOnR662(target, null, loadComponent);
	}

	public static ActualParameter_c[] getManyV_PARsOnR662(
			SignalInvocation_c target, ClassQueryInterface_c test) {
		return getManyV_PARsOnR662(target, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR662(
			SignalInvocation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_TakesActualParameterTakes_R662) {
			for (int i = 0; i < target.backPointer_TakesActualParameterTakes_R662
					.size(); ++i) {
				ActualParameter_c source = (ActualParameter_c) target.backPointer_TakesActualParameterTakes_R662
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	// referring navigation

	EventSpecificationStatement_c EventSpecificationStatement;
	public void relateAcrossR700To(EventSpecificationStatement_c target) {
		relateAcrossR700To(target, true);
	}
	public void relateAcrossR700To(EventSpecificationStatement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == EventSpecificationStatement)
			return; // already related

		if (EventSpecificationStatement != target) {

			Object oldKey = getInstanceKey();

			if (EventSpecificationStatement != null) {

				EventSpecificationStatement.clearBackPointerR700To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActualParameter_c.relateAcrossR700To(EventSpecificationStatement_c target)",
									"Relate performed across R700 from Actual Parameter to Event Specification Statement without unrelate of prior instance.");
				}
			}

			EventSpecificationStatement = target;
			if (IdAssigner.NULL_UUID.equals(target.getStatement_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_statement_id = target.getStatement_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR700To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR700From(EventSpecificationStatement_c target) {
		unrelateAcrossR700From(target, true);
	}
	public void unrelateAcrossR700From(EventSpecificationStatement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (EventSpecificationStatement == null)
			return; // already unrelated

		if (target != EventSpecificationStatement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R700",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR700To(this);
		}

		if (EventSpecificationStatement != null) {

			m_statement_id = EventSpecificationStatement.getStatement_id();
			if (IdAssigner.NULL_UUID.equals(m_statement_id)) {
				m_statement_id = EventSpecificationStatement
						.getStatement_idCachedValue();
			}
			EventSpecificationStatement = null;
			target.removeRef();
		}
	}

	public static ActualParameter_c getOneV_PAROnR700(
			EventSpecificationStatement_c[] targets) {
		return getOneV_PAROnR700(targets, null);
	}

	public static ActualParameter_c getOneV_PAROnR700(
			EventSpecificationStatement_c[] targets, ClassQueryInterface_c test) {
		ActualParameter_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneV_PAROnR700(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActualParameter_c getOneV_PAROnR700(
			EventSpecificationStatement_c target) {
		return getOneV_PAROnR700(target, null);
	}

	public static ActualParameter_c getOneV_PAROnR700(
			EventSpecificationStatement_c target, boolean loadComponent) {
		return getOneV_PAROnR700(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActualParameter_c getOneV_PAROnR700(
			EventSpecificationStatement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneV_PAROnR700(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActualParameter_c getOneV_PAROnR700(ModelRoot modelRoot,
			EventSpecificationStatement_c target, ClassQueryInterface_c test) {
		return getOneV_PAROnR700(modelRoot, target, test, true);
	}

	public static ActualParameter_c getOneV_PAROnR700(ModelRoot modelRoot,
			EventSpecificationStatement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneV_PAROnR700(modelRoot, target, test);
	}
	private static ActualParameter_c find_getOneV_PAROnR700(
			ModelRoot modelRoot, EventSpecificationStatement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ActualParameter_R700) {
				for (int i = 0; i < target.backPointer_ActualParameter_R700
						.size(); ++i) {
					ActualParameter_c source = (ActualParameter_c) target.backPointer_ActualParameter_R700
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ActualParameter_c[] getManyV_PARsOnR700(
			EventSpecificationStatement_c[] targets) {
		return getManyV_PARsOnR700(targets, null);
	}
	public static ActualParameter_c[] getManyV_PARsOnR700(
			EventSpecificationStatement_c[] targets, boolean loadComponent) {
		return getManyV_PARsOnR700(targets, null, loadComponent);
	}
	public static ActualParameter_c[] getManyV_PARsOnR700(
			EventSpecificationStatement_c[] targets, ClassQueryInterface_c test) {
		return getManyV_PARsOnR700(targets, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR700(
			EventSpecificationStatement_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ActualParameter_R700) {
				for (int j = 0; j < targets[i].backPointer_ActualParameter_R700
						.size(); ++j) {
					ActualParameter_c source = (ActualParameter_c) targets[i].backPointer_ActualParameter_R700
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	public static ActualParameter_c[] getManyV_PARsOnR700(
			EventSpecificationStatement_c target) {
		return getManyV_PARsOnR700(target, null);
	}

	public static ActualParameter_c[] getManyV_PARsOnR700(
			EventSpecificationStatement_c target, boolean loadComponent) {
		return getManyV_PARsOnR700(target, null, loadComponent);
	}

	public static ActualParameter_c[] getManyV_PARsOnR700(
			EventSpecificationStatement_c target, ClassQueryInterface_c test) {
		return getManyV_PARsOnR700(target, test, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR700(
			EventSpecificationStatement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ActualParameter_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ActualParameter_R700) {
			for (int i = 0; i < target.backPointer_ActualParameter_R700.size(); ++i) {
				ActualParameter_c source = (ActualParameter_c) target.backPointer_ActualParameter_R700
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ActualParameter_c[] ret_set = new ActualParameter_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActualParameter_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	ActualParameter_c backPointer_SucceedsActualParameterSucceeds_R816;

	public void setActualParameterOrderInChildListR816(
			ActualParameter_c target, int index) {
		unrelateAcrossR816FromSucceeds(target);
		ActualParameter_c[] elements = ActualParameter_c
				.getManyV_PARsOnR816Succeeds(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR816FromSucceeds((ActualParameter_c) elements[i]);
			}
			count++;
		}
		relateAcrossR816ToSucceeds(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR816ToSucceeds((ActualParameter_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR816ToSucceeds(ActualParameter_c target) {
		if (target != null) {
			target.relateAcrossR816ToPrecedes(this, true);
		}
	}

	public void relateAcrossR816ToSucceeds(ActualParameter_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR816ToPrecedes(this, notifyChanges);
		}
	}

	public void setBackPointerR816ToSucceeds(ActualParameter_c target) {
		backPointer_SucceedsActualParameterSucceeds_R816 = target;
	}

	public void unrelateAcrossR816FromSucceeds(ActualParameter_c target) {
		if (target != null) {
			target.unrelateAcrossR816FromPrecedes(this, true);
		}
	}

	public void unrelateAcrossR816FromSucceeds(ActualParameter_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR816FromPrecedes(this, notifyChanges);
		}
	}

	public void clearBackPointerR816ToSucceeds(ActualParameter_c target) {
		if (target == backPointer_SucceedsActualParameterSucceeds_R816) {
			backPointer_SucceedsActualParameterSucceeds_R816 = null;
		}
	}

	public static ActualParameter_c getOneV_PAROnR816Precedes(
			ActualParameter_c[] targets) {
		return getOneV_PAROnR816Precedes(targets, null);
	}

	public static ActualParameter_c getOneV_PAROnR816Precedes(
			ActualParameter_c[] targets, ClassQueryInterface_c test) {
		return getOneV_PAROnR816Precedes(targets, test, true);
	}

	public static ActualParameter_c getOneV_PAROnR816Precedes(
			ActualParameter_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		ActualParameter_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ActualParameter_c candidate_val = getOneV_PAROnR816Precedes(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneV_PAROnR816Precedes(targets[i],
							loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ActualParameter_c getOneV_PAROnR816Precedes(
			ActualParameter_c target) {
		return getOneV_PAROnR816Precedes(target, true);
	}
	public static ActualParameter_c getOneV_PAROnR816Precedes(
			ActualParameter_c target, boolean loadComponent) {
		if (target != null) {
			return target.PrecedesActualParameter;
		} else {
			return null;
		}
	}

	public static ActualParameter_c[] getManyV_PARsOnR816Precedes(
			ActualParameter_c[] targets, ClassQueryInterface_c test) {
		return getManyV_PARsOnR816Precedes(targets, test, true);
	}

	public static ActualParameter_c [] getManyV_PARsOnR816Precedes(ActualParameter_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ActualParameter_c[0];
  
  
  LinkedHashSet<ActualParameter_c> elementsSet = new LinkedHashSet<ActualParameter_c>();
  for (int i = 0; i < targets.length; i++) {
    ActualParameter_c associate = targets[i].PrecedesActualParameter;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ActualParameter_c[] result = new ActualParameter_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ActualParameter_c[] getManyV_PARsOnR816Precedes(
			ActualParameter_c[] targets) {
		return getManyV_PARsOnR816Precedes(targets, null);
	}

	public static ActualParameter_c[] getManyV_PARsOnR816Precedes(
			ActualParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ActualParameter_c[] targetArray = new ActualParameter_c[1];
			targetArray[0] = target;
			return getManyV_PARsOnR816Precedes(targetArray, test, loadComponent);
		} else {
			ActualParameter_c[] result = new ActualParameter_c[0];
			return result;
		}

	}

	public static ActualParameter_c[] getManyV_PARsOnR816Precedes(
			ActualParameter_c target, ClassQueryInterface_c test) {
		return getManyV_PARsOnR816Precedes(target, null, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR816Precedes(
			ActualParameter_c target) {
		return getManyV_PARsOnR816Precedes(target, null, true);
	}

	public static ActualParameter_c[] getManyV_PARsOnR816Precedes(
			ActualParameter_c target, boolean loadComponent) {
		return getManyV_PARsOnR816Precedes(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (HasValue == null) {
			// R800
			Value_c relInst37767 = (Value_c) baseRoot.getInstanceList(
					Value_c.class).get(new Object[]{m_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst37767 == null) {
				relInst37767 = (Value_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Value_c.class)
						.get(new Object[]{m_value_id});
			}
			if (relInst37767 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst37767 = (Value_c) roots[i].getInstanceList(
							Value_c.class).get(new Object[]{m_value_id});
					if (relInst37767 != null)
						break;
				}
			}
			//synchronized
			if (relInst37767 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst37767) && !isProxy())) {
					relInst37767.relateAcrossR800To(this, notifyChanges);
				}
			}
		}

		if (OperationValue == null) {
			// R811
			OperationValue_c relInst37768 = (OperationValue_c) baseRoot
					.getInstanceList(OperationValue_c.class).get(
							new Object[]{m_invocation_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst37768 == null) {
				relInst37768 = (OperationValue_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(OperationValue_c.class)
						.get(new Object[]{m_invocation_value_id});
			}
			if (relInst37768 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst37768 = (OperationValue_c) roots[i].getInstanceList(
							OperationValue_c.class).get(
							new Object[]{m_invocation_value_id});
					if (relInst37768 != null)
						break;
				}
			}
			//synchronized
			if (relInst37768 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst37768) && !isProxy())) {
					relInst37768.relateAcrossR811To(this, notifyChanges);
				}
			}
		}

		if (MessageValue == null) {
			// R842
			MessageValue_c relInst37769 = (MessageValue_c) baseRoot
					.getInstanceList(MessageValue_c.class).get(
							new Object[]{m_invocation_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst37769 == null) {
				relInst37769 = (MessageValue_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(MessageValue_c.class)
						.get(new Object[]{m_invocation_value_id});
			}
			if (relInst37769 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst37769 = (MessageValue_c) roots[i].getInstanceList(
							MessageValue_c.class).get(
							new Object[]{m_invocation_value_id});
					if (relInst37769 != null)
						break;
				}
			}
			//synchronized
			if (relInst37769 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst37769) && !isProxy())) {
					relInst37769.relateAcrossR842To(this, notifyChanges);
				}
			}
		}

		if (FunctionValue == null) {
			// R817
			FunctionValue_c relInst37770 = (FunctionValue_c) baseRoot
					.getInstanceList(FunctionValue_c.class).get(
							new Object[]{m_invocation_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst37770 == null) {
				relInst37770 = (FunctionValue_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(FunctionValue_c.class)
						.get(new Object[]{m_invocation_value_id});
			}
			if (relInst37770 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst37770 = (FunctionValue_c) roots[i].getInstanceList(
							FunctionValue_c.class).get(
							new Object[]{m_invocation_value_id});
					if (relInst37770 != null)
						break;
				}
			}
			//synchronized
			if (relInst37770 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst37770) && !isProxy())) {
					relInst37770.relateAcrossR817To(this, notifyChanges);
				}
			}
		}

		if (BridgeValue == null) {
			// R810
			BridgeValue_c relInst37771 = (BridgeValue_c) baseRoot
					.getInstanceList(BridgeValue_c.class).get(
							new Object[]{m_invocation_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst37771 == null) {
				relInst37771 = (BridgeValue_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(BridgeValue_c.class)
						.get(new Object[]{m_invocation_value_id});
			}
			if (relInst37771 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst37771 = (BridgeValue_c) roots[i].getInstanceList(
							BridgeValue_c.class).get(
							new Object[]{m_invocation_value_id});
					if (relInst37771 != null)
						break;
				}
			}
			//synchronized
			if (relInst37771 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst37771) && !isProxy())) {
					relInst37771.relateAcrossR810To(this, notifyChanges);
				}
			}
		}

		if (PrecedesActualParameter == null) {
			// R816
			ActualParameter_c relInst37772 = (ActualParameter_c) baseRoot
					.getInstanceList(ActualParameter_c.class).get(
							new Object[]{m_next_value_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst37772 == null) {
				relInst37772 = (ActualParameter_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(ActualParameter_c.class)
						.get(new Object[]{m_next_value_id});
			}
			if (relInst37772 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst37772 = (ActualParameter_c) roots[i]
							.getInstanceList(ActualParameter_c.class).get(
									new Object[]{m_next_value_id});
					if (relInst37772 != null)
						break;
				}
			}
			//synchronized
			if (relInst37772 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst37772) && !isProxy())) {
					relInst37772
							.relateAcrossR816ToSucceeds(this, notifyChanges);
				}
			}
		}

		if (FunctionInvocation == null) {
			// R669
			FunctionInvocation_c relInst37773 = (FunctionInvocation_c) baseRoot
					.getInstanceList(FunctionInvocation_c.class).get(
							new Object[]{m_statement_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst37773 == null) {
				relInst37773 = (FunctionInvocation_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(FunctionInvocation_c.class)
						.get(new Object[]{m_statement_id});
			}
			if (relInst37773 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst37773 = (FunctionInvocation_c) roots[i]
							.getInstanceList(FunctionInvocation_c.class).get(
									new Object[]{m_statement_id});
					if (relInst37773 != null)
						break;
				}
			}
			//synchronized
			if (relInst37773 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst37773) && !isProxy())) {
					relInst37773.relateAcrossR669To(this, notifyChanges);
				}
			}
		}

		if (BridgeInvocation == null) {
			// R628
			BridgeInvocation_c relInst37774 = (BridgeInvocation_c) baseRoot
					.getInstanceList(BridgeInvocation_c.class).get(
							new Object[]{m_statement_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst37774 == null) {
				relInst37774 = (BridgeInvocation_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(BridgeInvocation_c.class)
						.get(new Object[]{m_statement_id});
			}
			if (relInst37774 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst37774 = (BridgeInvocation_c) roots[i]
							.getInstanceList(BridgeInvocation_c.class).get(
									new Object[]{m_statement_id});
					if (relInst37774 != null)
						break;
				}
			}
			//synchronized
			if (relInst37774 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst37774) && !isProxy())) {
					relInst37774.relateAcrossR628To(this, notifyChanges);
				}
			}
		}

		if (OperationInvocation == null) {
			// R627
			OperationInvocation_c relInst37775 = (OperationInvocation_c) baseRoot
					.getInstanceList(OperationInvocation_c.class).get(
							new Object[]{m_statement_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst37775 == null) {
				relInst37775 = (OperationInvocation_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(OperationInvocation_c.class)
						.get(new Object[]{m_statement_id});
			}
			if (relInst37775 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst37775 = (OperationInvocation_c) roots[i]
							.getInstanceList(OperationInvocation_c.class).get(
									new Object[]{m_statement_id});
					if (relInst37775 != null)
						break;
				}
			}
			//synchronized
			if (relInst37775 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst37775) && !isProxy())) {
					relInst37775.relateAcrossR627To(this, notifyChanges);
				}
			}
		}

		if (TakenByInterfaceOperationInvocation == null) {
			// R679
			InterfaceOperationInvocation_c relInst37776 = (InterfaceOperationInvocation_c) baseRoot
					.getInstanceList(InterfaceOperationInvocation_c.class).get(
							new Object[]{m_statement_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst37776 == null) {
				relInst37776 = (InterfaceOperationInvocation_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(InterfaceOperationInvocation_c.class)
						.get(new Object[]{m_statement_id});
			}
			if (relInst37776 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst37776 = (InterfaceOperationInvocation_c) roots[i]
							.getInstanceList(
									InterfaceOperationInvocation_c.class).get(
									new Object[]{m_statement_id});
					if (relInst37776 != null)
						break;
				}
			}
			//synchronized
			if (relInst37776 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst37776) && !isProxy())) {
					relInst37776.relateAcrossR679To(this, notifyChanges);
				}
			}
		}

		if (TakenBySignalInvocation == null) {
			// R662
			SignalInvocation_c relInst37777 = (SignalInvocation_c) baseRoot
					.getInstanceList(SignalInvocation_c.class).get(
							new Object[]{m_statement_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst37777 == null) {
				relInst37777 = (SignalInvocation_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(SignalInvocation_c.class)
						.get(new Object[]{m_statement_id});
			}
			if (relInst37777 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst37777 = (SignalInvocation_c) roots[i]
							.getInstanceList(SignalInvocation_c.class).get(
									new Object[]{m_statement_id});
					if (relInst37777 != null)
						break;
				}
			}
			//synchronized
			if (relInst37777 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst37777) && !isProxy())) {
					relInst37777.relateAcrossR662To(this, notifyChanges);
				}
			}
		}

		if (EventSpecificationStatement == null) {
			// R700
			EventSpecificationStatement_c relInst37778 = (EventSpecificationStatement_c) baseRoot
					.getInstanceList(EventSpecificationStatement_c.class).get(
							new Object[]{m_statement_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst37778 == null) {
				relInst37778 = (EventSpecificationStatement_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(EventSpecificationStatement_c.class)
						.get(new Object[]{m_statement_id});
			}
			if (relInst37778 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst37778 = (EventSpecificationStatement_c) roots[i]
							.getInstanceList(
									EventSpecificationStatement_c.class).get(
									new Object[]{m_statement_id});
					if (relInst37778 != null)
						break;
				}
			}
			//synchronized
			if (relInst37778 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst37778) && !isProxy())) {
					relInst37778.relateAcrossR700To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R800
		// V_VAL
		inst = HasValue;
		unrelateAcrossR800From(HasValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R811
		// V_TRV
		inst = OperationValue;
		unrelateAcrossR811From(OperationValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R842
		// V_MSV
		inst = MessageValue;
		unrelateAcrossR842From(MessageValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R817
		// V_FNV
		inst = FunctionValue;
		unrelateAcrossR817From(FunctionValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R810
		// V_BRV
		inst = BridgeValue;
		unrelateAcrossR810From(BridgeValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R816
		// V_PAR
		inst = PrecedesActualParameter;
		unrelateAcrossR816FromPrecedes(PrecedesActualParameter, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R669
		// ACT_FNC
		inst = FunctionInvocation;
		unrelateAcrossR669From(FunctionInvocation, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R628
		// ACT_BRG
		inst = BridgeInvocation;
		unrelateAcrossR628From(BridgeInvocation, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R627
		// ACT_TFM
		inst = OperationInvocation;
		unrelateAcrossR627From(OperationInvocation, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R679
		// ACT_IOP
		inst = TakenByInterfaceOperationInvocation;
		unrelateAcrossR679From(TakenByInterfaceOperationInvocation,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R662
		// ACT_SGN
		inst = TakenBySignalInvocation;
		unrelateAcrossR662From(TakenBySignalInvocation, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R700
		// E_ESS
		inst = EventSpecificationStatement;
		unrelateAcrossR700From(EventSpecificationStatement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ActualParameter_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ActualParameter_c inst = (ActualParameter_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ActualParameter_c ActualParameterInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ActualParameter_c result = findActualParameterInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static ActualParameter_c findActualParameterInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ActualParameter_c x = (ActualParameter_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static ActualParameter_c ActualParameterInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ActualParameterInstance(modelRoot, test, true);
	}

	public static ActualParameter_c ActualParameterInstance(ModelRoot modelRoot) {
		return ActualParameterInstance(modelRoot, null, true);
	}

	public static ActualParameter_c[] ActualParameterInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ActualParameter_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ActualParameter_c x = (ActualParameter_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ActualParameter_c[] ret_set = new ActualParameter_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ActualParameter_c[0];
			}
		}
	}
	public static ActualParameter_c[] ActualParameterInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ActualParameterInstances(modelRoot, test, true);
	}
	public static ActualParameter_c[] ActualParameterInstances(
			ModelRoot modelRoot) {
		return ActualParameterInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Actual Parameter.dispose call: ";
		Value_c testR800Inst = Value_c.getOneV_VALOnR800(this, false);

		if (testR800Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "800 ";
		}
		OperationValue_c testR811Inst = OperationValue_c.getOneV_TRVOnR811(
				this, false);

		if (testR811Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "811 ";
		}
		MessageValue_c testR842Inst = MessageValue_c.getOneV_MSVOnR842(this,
				false);

		if (testR842Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "842 ";
		}
		FunctionValue_c testR817Inst = FunctionValue_c.getOneV_FNVOnR817(this,
				false);

		if (testR817Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "817 ";
		}
		BridgeValue_c testR810Inst = BridgeValue_c.getOneV_BRVOnR810(this,
				false);

		if (testR810Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "810 ";
		}
		ActualParameter_c testR816Inst = ActualParameter_c
				.getOneV_PAROnR816Succeeds(this, false);

		if (testR816Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "816 ";
		}
		testR816Inst = ActualParameter_c.getOneV_PAROnR816Precedes(this, false);

		if (testR816Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "816 ";
		}
		FunctionInvocation_c testR669Inst = FunctionInvocation_c
				.getOneACT_FNCOnR669(this, false);

		if (testR669Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "669 ";
		}
		BridgeInvocation_c testR628Inst = BridgeInvocation_c
				.getOneACT_BRGOnR628(this, false);

		if (testR628Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "628 ";
		}
		OperationInvocation_c testR627Inst = OperationInvocation_c
				.getOneACT_TFMOnR627(this, false);

		if (testR627Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "627 ";
		}
		InterfaceOperationInvocation_c testR679Inst = InterfaceOperationInvocation_c
				.getOneACT_IOPOnR679(this, false);

		if (testR679Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "679 ";
		}
		SignalInvocation_c testR662Inst = SignalInvocation_c
				.getOneACT_SGNOnR662(this, false);

		if (testR662Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "662 ";
		}
		EventSpecificationStatement_c testR700Inst = EventSpecificationStatement_c
				.getOneE_ESSOnR700(this, false);

		if (testR700Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "700 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Actual Parameter",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("value_id")) {
			return true;
		}
		if (attributeName.equals("statement_id")) {
			return true;
		}
		if (attributeName.equals("next_value_id")) {
			return true;
		}
		if (attributeName.equals("invocation_value_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getValue_idLongBased() {
		if (HasValue != null) {
			return HasValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getValue_id() {
		if (HasValue != null) {
			return HasValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getValue_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_value_id))
			return m_value_id;
		else
			return getValue_id();
	}

	public void setValue_id(java.util.UUID newValue) {
		m_value_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getStatement_idLongBased() {
		if (OperationInvocation != null) {
			return OperationInvocation.getStatement_idLongBased();
		}
		if (BridgeInvocation != null) {
			return BridgeInvocation.getStatement_idLongBased();
		}
		if (FunctionInvocation != null) {
			return FunctionInvocation.getStatement_idLongBased();
		}
		if (EventSpecificationStatement != null) {
			return EventSpecificationStatement.getStatement_idLongBased();
		}
		if (TakenByInterfaceOperationInvocation != null) {
			return TakenByInterfaceOperationInvocation
					.getStatement_idLongBased();
		}
		if (TakenBySignalInvocation != null) {
			return TakenBySignalInvocation.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getStatement_id() {
		if (OperationInvocation != null) {
			return OperationInvocation.getStatement_id();
		}
		if (BridgeInvocation != null) {
			return BridgeInvocation.getStatement_id();
		}
		if (FunctionInvocation != null) {
			return FunctionInvocation.getStatement_id();
		}
		if (EventSpecificationStatement != null) {
			return EventSpecificationStatement.getStatement_id();
		}
		if (TakenByInterfaceOperationInvocation != null) {
			return TakenByInterfaceOperationInvocation.getStatement_id();
		}
		if (TakenBySignalInvocation != null) {
			return TakenBySignalInvocation.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getStatement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_statement_id))
			return m_statement_id;
		else
			return getStatement_id();
	}

	public String getName() {
		return m_name;
	}

	public void setName(String newValue) {
		m_name = newValue;
	}
	public long getNext_value_idLongBased() {
		if (PrecedesActualParameter != null) {
			return PrecedesActualParameter.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getNext_value_id() {
		if (PrecedesActualParameter != null) {
			return PrecedesActualParameter.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getNext_value_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_next_value_id))
			return m_next_value_id;
		else
			return getNext_value_id();
	}

	public void setNext_value_id(java.util.UUID newValue) {
		m_next_value_id = IdAssigner.preprocessUUID(newValue);
	}
	public int getLabellinenumber() {
		return m_labellinenumber;
	}

	public void setLabellinenumber(int newValue) {
		m_labellinenumber = newValue;
	}
	public int getLabelcolumn() {
		return m_labelcolumn;
	}

	public void setLabelcolumn(int newValue) {
		m_labelcolumn = newValue;
	}
	public long getInvocation_value_idLongBased() {
		if (OperationValue != null) {
			return OperationValue.getValue_idLongBased();
		}
		if (MessageValue != null) {
			return MessageValue.getValue_idLongBased();
		}
		if (FunctionValue != null) {
			return FunctionValue.getValue_idLongBased();
		}
		if (BridgeValue != null) {
			return BridgeValue.getValue_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getInvocation_value_id() {
		if (OperationValue != null) {
			return OperationValue.getValue_id();
		}
		if (MessageValue != null) {
			return MessageValue.getValue_id();
		}
		if (FunctionValue != null) {
			return FunctionValue.getValue_id();
		}
		if (BridgeValue != null) {
			return BridgeValue.getValue_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getInvocation_value_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_invocation_value_id))
			return m_invocation_value_id;
		else
			return getInvocation_value_id();
	}

	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Actual Parameter", //$NON-NLS-1$
				" Operation entered: Actual Parameter::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ActualParameter_c[] objs = ActualParameter_c.ActualParameterInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Actual Parameter", //$NON-NLS-1$
				" Operation entered: Actual Parameter::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ActualParameter_c_test37780_c implements ClassQueryInterface_c {
			ActualParameter_c_test37780_c(java.util.UUID p37781) {
				m_p37781 = p37781;
			}
			private java.util.UUID m_p37781;
			public boolean evaluate(Object candidate) {
				ActualParameter_c selected = (ActualParameter_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p37781));
				return retval;
			}
		}

		ActualParameter_c[] objs37779 = ActualParameter_c
				.ActualParameterInstances(modelRoot,
						new ActualParameter_c_test37780_c(getValue_id()));

		if (((objs37779.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actual Parameter", //$NON-NLS-1$
								"Consistency: Object: Actual Parameter: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs37779.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Actual Parameter: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs37779.length), e);
			}
			retval = false;

		}

		if (((objs37779.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actual Parameter", //$NON-NLS-1$
								"Consistency: Object: Actual Parameter: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs37779.length)
										+ " Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actual Parameter: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37779.length)
										+ " Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Actual Parameter is a referring class in association: rel.Numb = 800
		// The participating class is: Value
		class Value_c_test37785_c implements ClassQueryInterface_c {
			Value_c_test37785_c(java.util.UUID p37786) {
				m_p37786 = p37786;
			}
			private java.util.UUID m_p37786;
			public boolean evaluate(Object candidate) {
				Value_c selected = (Value_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p37786));
				return retval;
			}
		}

		Value_c[] objs37784 = Value_c.ValueInstances(modelRoot,
				new Value_c_test37785_c(getValue_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs37784.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actual Parameter", //$NON-NLS-1$
								"Consistency: Object: Actual Parameter: Association: 800: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs37784.length)
										+ " Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actual Parameter: Association: 800: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37784.length)
										+ " Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Actual Parameter is a referring class in association: rel.Numb = 627
		// The participating class is: Operation Invocation
		class OperationInvocation_c_test37788_c
				implements
					ClassQueryInterface_c {
			OperationInvocation_c_test37788_c(java.util.UUID p37789) {
				m_p37789 = p37789;
			}
			private java.util.UUID m_p37789;
			public boolean evaluate(Object candidate) {
				OperationInvocation_c selected = (OperationInvocation_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p37789));
				return retval;
			}
		}

		OperationInvocation_c[] objs37787 = OperationInvocation_c
				.OperationInvocationInstances(
						modelRoot,
						new OperationInvocation_c_test37788_c(getStatement_id()));

		if (((objs37787.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actual Parameter", //$NON-NLS-1$
								"Consistency: Object: Actual Parameter: Association: 627: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs37787.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actual Parameter: Association: 627: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37787.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Actual Parameter is a referring class in association: rel.Numb = 628
		// The participating class is: Bridge Invocation
		class BridgeInvocation_c_test37791_c implements ClassQueryInterface_c {
			BridgeInvocation_c_test37791_c(java.util.UUID p37792) {
				m_p37792 = p37792;
			}
			private java.util.UUID m_p37792;
			public boolean evaluate(Object candidate) {
				BridgeInvocation_c selected = (BridgeInvocation_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p37792));
				return retval;
			}
		}

		BridgeInvocation_c[] objs37790 = BridgeInvocation_c
				.BridgeInvocationInstances(modelRoot,
						new BridgeInvocation_c_test37791_c(getStatement_id()));

		if (((objs37790.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actual Parameter", //$NON-NLS-1$
								"Consistency: Object: Actual Parameter: Association: 628: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs37790.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actual Parameter: Association: 628: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37790.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Actual Parameter is a referring class in association: rel.Numb = 669
		// The participating class is: Function Invocation
		class FunctionInvocation_c_test37794_c implements ClassQueryInterface_c {
			FunctionInvocation_c_test37794_c(java.util.UUID p37795) {
				m_p37795 = p37795;
			}
			private java.util.UUID m_p37795;
			public boolean evaluate(Object candidate) {
				FunctionInvocation_c selected = (FunctionInvocation_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p37795));
				return retval;
			}
		}

		FunctionInvocation_c[] objs37793 = FunctionInvocation_c
				.FunctionInvocationInstances(modelRoot,
						new FunctionInvocation_c_test37794_c(getStatement_id()));

		if (((objs37793.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actual Parameter", //$NON-NLS-1$
								"Consistency: Object: Actual Parameter: Association: 669: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs37793.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actual Parameter: Association: 669: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37793.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Actual Parameter is a referring class in association: rel.Numb = 700
		// The participating class is: Event Specification Statement
		class EventSpecificationStatement_c_test37797_c
				implements
					ClassQueryInterface_c {
			EventSpecificationStatement_c_test37797_c(java.util.UUID p37798) {
				m_p37798 = p37798;
			}
			private java.util.UUID m_p37798;
			public boolean evaluate(Object candidate) {
				EventSpecificationStatement_c selected = (EventSpecificationStatement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p37798));
				return retval;
			}
		}

		EventSpecificationStatement_c[] objs37796 = EventSpecificationStatement_c
				.EventSpecificationStatementInstances(modelRoot,
						new EventSpecificationStatement_c_test37797_c(
								getStatement_id()));

		if (((objs37796.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actual Parameter", //$NON-NLS-1$
								"Consistency: Object: Actual Parameter: Association: 700: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs37796.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actual Parameter: Association: 700: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37796.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Actual Parameter is a referring class in association: rel.Numb = 679
		// The participating class is: Interface Operation Invocation
		class InterfaceOperationInvocation_c_test37800_c
				implements
					ClassQueryInterface_c {
			InterfaceOperationInvocation_c_test37800_c(java.util.UUID p37801) {
				m_p37801 = p37801;
			}
			private java.util.UUID m_p37801;
			public boolean evaluate(Object candidate) {
				InterfaceOperationInvocation_c selected = (InterfaceOperationInvocation_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p37801));
				return retval;
			}
		}

		InterfaceOperationInvocation_c[] objs37799 = InterfaceOperationInvocation_c
				.InterfaceOperationInvocationInstances(modelRoot,
						new InterfaceOperationInvocation_c_test37800_c(
								getStatement_id()));

		if (((objs37799.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actual Parameter", //$NON-NLS-1$
								"Consistency: Object: Actual Parameter: Association: 679: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs37799.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actual Parameter: Association: 679: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37799.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Actual Parameter is a referring class in association: rel.Numb = 662
		// The participating class is: Signal Invocation
		class SignalInvocation_c_test37803_c implements ClassQueryInterface_c {
			SignalInvocation_c_test37803_c(java.util.UUID p37804) {
				m_p37804 = p37804;
			}
			private java.util.UUID m_p37804;
			public boolean evaluate(Object candidate) {
				SignalInvocation_c selected = (SignalInvocation_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p37804));
				return retval;
			}
		}

		SignalInvocation_c[] objs37802 = SignalInvocation_c
				.SignalInvocationInstances(modelRoot,
						new SignalInvocation_c_test37803_c(getStatement_id()));

		if (((objs37802.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actual Parameter", //$NON-NLS-1$
								"Consistency: Object: Actual Parameter: Association: 662: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs37802.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actual Parameter: Association: 662: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37802.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Actual Parameter is a referring class in association: rel.Numb = 816
		// The participating class is: Actual Parameter
		class ActualParameter_c_test37806_c implements ClassQueryInterface_c {
			ActualParameter_c_test37806_c(java.util.UUID p37807) {
				m_p37807 = p37807;
			}
			private java.util.UUID m_p37807;
			public boolean evaluate(Object candidate) {
				ActualParameter_c selected = (ActualParameter_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p37807));
				return retval;
			}
		}

		ActualParameter_c[] objs37805 = ActualParameter_c
				.ActualParameterInstances(modelRoot,
						new ActualParameter_c_test37806_c(getNext_value_id()));

		if (((objs37805.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actual Parameter", //$NON-NLS-1$
								"Consistency: Object: Actual Parameter: Association: 816: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs37805.length)
										+ " Next_Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actual Parameter: Association: 816: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37805.length)
										+ " Next_Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Actual Parameter is a referring class in association: rel.Numb = 811
		// The participating class is: Operation Value
		class OperationValue_c_test37809_c implements ClassQueryInterface_c {
			OperationValue_c_test37809_c(java.util.UUID p37810) {
				m_p37810 = p37810;
			}
			private java.util.UUID m_p37810;
			public boolean evaluate(Object candidate) {
				OperationValue_c selected = (OperationValue_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p37810));
				return retval;
			}
		}

		OperationValue_c[] objs37808 = OperationValue_c
				.OperationValueInstances(modelRoot,
						new OperationValue_c_test37809_c(
								getInvocation_value_id()));

		if (((objs37808.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actual Parameter", //$NON-NLS-1$
								"Consistency: Object: Actual Parameter: Association: 811: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs37808.length)
										+ " Invocation_Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actual Parameter: Association: 811: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37808.length)
										+ " Invocation_Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Actual Parameter is a referring class in association: rel.Numb = 842
		// The participating class is: Message Value
		class MessageValue_c_test37812_c implements ClassQueryInterface_c {
			MessageValue_c_test37812_c(java.util.UUID p37813) {
				m_p37813 = p37813;
			}
			private java.util.UUID m_p37813;
			public boolean evaluate(Object candidate) {
				MessageValue_c selected = (MessageValue_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p37813));
				return retval;
			}
		}

		MessageValue_c[] objs37811 = MessageValue_c.MessageValueInstances(
				modelRoot, new MessageValue_c_test37812_c(
						getInvocation_value_id()));

		if (((objs37811.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actual Parameter", //$NON-NLS-1$
								"Consistency: Object: Actual Parameter: Association: 842: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs37811.length)
										+ " Invocation_Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actual Parameter: Association: 842: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37811.length)
										+ " Invocation_Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Actual Parameter is a referring class in association: rel.Numb = 817
		// The participating class is: Function Value
		class FunctionValue_c_test37815_c implements ClassQueryInterface_c {
			FunctionValue_c_test37815_c(java.util.UUID p37816) {
				m_p37816 = p37816;
			}
			private java.util.UUID m_p37816;
			public boolean evaluate(Object candidate) {
				FunctionValue_c selected = (FunctionValue_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p37816));
				return retval;
			}
		}

		FunctionValue_c[] objs37814 = FunctionValue_c.FunctionValueInstances(
				modelRoot, new FunctionValue_c_test37815_c(
						getInvocation_value_id()));

		if (((objs37814.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actual Parameter", //$NON-NLS-1$
								"Consistency: Object: Actual Parameter: Association: 817: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs37814.length)
										+ " Invocation_Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actual Parameter: Association: 817: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37814.length)
										+ " Invocation_Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Actual Parameter is a referring class in association: rel.Numb = 810
		// The participating class is: Bridge Value
		class BridgeValue_c_test37818_c implements ClassQueryInterface_c {
			BridgeValue_c_test37818_c(java.util.UUID p37819) {
				m_p37819 = p37819;
			}
			private java.util.UUID m_p37819;
			public boolean evaluate(Object candidate) {
				BridgeValue_c selected = (BridgeValue_c) candidate;
				boolean retval = false;
				retval = (selected.getValue_id().equals(m_p37819));
				return retval;
			}
		}

		BridgeValue_c[] objs37817 = BridgeValue_c.BridgeValueInstances(
				modelRoot, new BridgeValue_c_test37818_c(
						getInvocation_value_id()));

		if (((objs37817.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actual Parameter", //$NON-NLS-1$
								"Consistency: Object: Actual Parameter: Association: 810: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs37817.length)
										+ " Invocation_Value_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actual Parameter: Association: 810: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37817.length)
										+ " Invocation_Value_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Actual Parameter is a participating class in association: rel.Numb = 816
		// Object: Actual Parameter
		class ActualParameter_c_test37821_c implements ClassQueryInterface_c {
			ActualParameter_c_test37821_c(java.util.UUID p37822) {
				m_p37822 = p37822;
			}
			private java.util.UUID m_p37822;
			public boolean evaluate(Object candidate) {
				ActualParameter_c selected = (ActualParameter_c) candidate;
				boolean retval = false;
				retval = (selected.getNext_value_id().equals(m_p37822));
				return retval;
			}
		}

		ActualParameter_c[] objs37820 = ActualParameter_c
				.ActualParameterInstances(modelRoot,
						new ActualParameter_c_test37821_c(getValue_id()));

		if (((objs37820.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actual Parameter", //$NON-NLS-1$
								"Consistency: Object: Actual Parameter: Association: 816: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs37820.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actual Parameter: Association: 816: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs37820.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Actual Parameter",
				" Operation entered: ActualParameter::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Value_c v_val = Value_c.getOneV_VALOnR800(this);

		if (((v_val != null))) {

			this.unrelateAcrossR800From(v_val);

			if (v_val != null) {
				v_val.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		ActualParameter_c v_next_parm = ActualParameter_c
				.getOneV_PAROnR816Precedes(this);

		ActualParameter_c v_prior_parm = ActualParameter_c
				.getOneV_PAROnR816Succeeds(this);

		if (((v_next_parm != null) && (v_prior_parm != null))) {

			this.unrelateAcrossR816FromPrecedes(v_next_parm);

			if (v_prior_parm != null) {
				v_prior_parm.unrelateAcrossR816FromPrecedes(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_prior_parm != null) {
				v_prior_parm.relateAcrossR816ToPrecedes(v_next_parm);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Relate attempted on null left hand instance.", t);
			}

		}

		else {

			if (((v_prior_parm != null) && (v_next_parm == null))) {

				if (v_prior_parm != null) {
					v_prior_parm.unrelateAcrossR816FromPrecedes(this);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Unrelate attempted on null left hand instance.",
									t);
				}

			}

			else {

				this.unrelateAcrossR816FromPrecedes(v_next_parm);

			}

		}

		delete();

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Actual Parameter
