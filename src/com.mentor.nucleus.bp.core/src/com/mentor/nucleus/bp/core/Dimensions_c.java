package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Dimensions_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_DIMENSIONS extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Dimensions_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Dimensions_c(ModelRoot modelRoot, int p_m_elementcount,
			int p_m_dimensioncount, java.util.UUID p_m_sync_id,
			java.util.UUID p_m_sparm_id, java.util.UUID p_m_bparm_id,
			java.util.UUID p_m_brg_id, java.util.UUID p_m_id,
			java.util.UUID p_m_obj_id, java.util.UUID p_m_attr_id,
			java.util.UUID p_m_tparm_id, java.util.UUID p_m_tfr_id,
			java.util.UUID p_m_member_id, java.util.UUID p_m_dt_id,
			java.util.UUID p_m_pp_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smedi_id, java.util.UUID p_m_dim_id,
			java.util.UUID p_m_var_id) {
		super(modelRoot);
		m_elementcount = p_m_elementcount;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sparm_id = IdAssigner.preprocessUUID(p_m_sparm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_bparm_id = IdAssigner.preprocessUUID(p_m_bparm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_brg_id = IdAssigner.preprocessUUID(p_m_brg_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_id = IdAssigner.preprocessUUID(p_m_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_tparm_id = IdAssigner.preprocessUUID(p_m_tparm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_tfr_id = IdAssigner.preprocessUUID(p_m_tfr_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_member_id = IdAssigner.preprocessUUID(p_m_member_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_pp_id = IdAssigner.preprocessUUID(p_m_pp_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smedi_id = IdAssigner.preprocessUUID(p_m_smedi_id);
		m_dimensioncount = p_m_dimensioncount;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_dim_id = IdAssigner.preprocessUUID(p_m_dim_id);
		//extract 28 bit value only            
		m_dim_idLongBased = 0xfffffff & p_m_dim_id.getLeastSignificantBits();
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sync_id = IdAssigner.preprocessUUID(p_m_sync_id);

		setUniqueId(m_dim_id);
		Object[] key = {m_dim_id};
		addInstanceToMap(key);
	}
	static public Dimensions_c createProxy(ModelRoot modelRoot,
			int p_m_elementcount, int p_m_dimensioncount,
			java.util.UUID p_m_sync_id, java.util.UUID p_m_sparm_id,
			java.util.UUID p_m_bparm_id, java.util.UUID p_m_brg_id,
			java.util.UUID p_m_id, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_attr_id, java.util.UUID p_m_tparm_id,
			java.util.UUID p_m_tfr_id, java.util.UUID p_m_member_id,
			java.util.UUID p_m_dt_id, java.util.UUID p_m_pp_id,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_smedi_id,
			java.util.UUID p_m_dim_id, java.util.UUID p_m_var_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);
		Dimensions_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_dim_id};
			new_inst = (Dimensions_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_elementcount = p_m_elementcount;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sparm_id = IdAssigner.preprocessUUID(p_m_sparm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_bparm_id = IdAssigner.preprocessUUID(p_m_bparm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_brg_id = IdAssigner.preprocessUUID(p_m_brg_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_tparm_id = IdAssigner.preprocessUUID(p_m_tparm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_tfr_id = IdAssigner.preprocessUUID(p_m_tfr_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_member_id = IdAssigner.preprocessUUID(p_m_member_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_pp_id = IdAssigner.preprocessUUID(p_m_pp_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smedi_id = IdAssigner.preprocessUUID(p_m_smedi_id);
				new_inst.m_dimensioncount = p_m_dimensioncount;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_dim_id = IdAssigner.preprocessUUID(p_m_dim_id);
				//extract 28 bit value only            
				new_inst.m_dim_idLongBased = 0xfffffff & p_m_dim_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sync_id = IdAssigner.preprocessUUID(p_m_sync_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Dimensions_c(modelRoot, p_m_elementcount,
					p_m_dimensioncount, p_m_sync_id, p_m_sparm_id,
					p_m_bparm_id, p_m_brg_id, p_m_id, p_m_obj_id, p_m_attr_id,
					p_m_tparm_id, p_m_tfr_id, p_m_member_id, p_m_dt_id,
					p_m_pp_id, p_m_sm_id, p_m_smedi_id, p_m_dim_id, p_m_var_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Dimensions_c resolveInstance(ModelRoot modelRoot,
			int p_m_elementcount, int p_m_dimensioncount,
			java.util.UUID p_m_sync_id, java.util.UUID p_m_sparm_id,
			java.util.UUID p_m_bparm_id, java.util.UUID p_m_brg_id,
			java.util.UUID p_m_id, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_attr_id, java.util.UUID p_m_tparm_id,
			java.util.UUID p_m_tfr_id, java.util.UUID p_m_member_id,
			java.util.UUID p_m_dt_id, java.util.UUID p_m_pp_id,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_smedi_id,
			java.util.UUID p_m_dim_id, java.util.UUID p_m_var_id) {
		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);
		Dimensions_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_dim_id};
			source = (Dimensions_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_elementcount = p_m_elementcount;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sparm_id = IdAssigner.preprocessUUID(p_m_sparm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_bparm_id = IdAssigner.preprocessUUID(p_m_bparm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_brg_id = IdAssigner.preprocessUUID(p_m_brg_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_id = IdAssigner.preprocessUUID(p_m_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_tparm_id = IdAssigner.preprocessUUID(p_m_tparm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_tfr_id = IdAssigner.preprocessUUID(p_m_tfr_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_member_id = IdAssigner.preprocessUUID(p_m_member_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_pp_id = IdAssigner.preprocessUUID(p_m_pp_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smedi_id = IdAssigner.preprocessUUID(p_m_smedi_id);
				source.m_dimensioncount = p_m_dimensioncount;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_dim_id = IdAssigner.preprocessUUID(p_m_dim_id);
				//extract 28 bit value only            
				source.m_dim_idLongBased = 0xfffffff & p_m_dim_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sync_id = IdAssigner.preprocessUUID(p_m_sync_id);

				return source;
			}
		}
		// there is no instance matching the id
		Dimensions_c new_inst = new Dimensions_c(modelRoot, p_m_elementcount,
				p_m_dimensioncount, p_m_sync_id, p_m_sparm_id, p_m_bparm_id,
				p_m_brg_id, p_m_id, p_m_obj_id, p_m_attr_id, p_m_tparm_id,
				p_m_tfr_id, p_m_member_id, p_m_dt_id, p_m_pp_id, p_m_sm_id,
				p_m_smedi_id, p_m_dim_id, p_m_var_id);
		return new_inst;
	}
	public Dimensions_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_sparm_id = IdAssigner.NULL_UUID;
		m_bparm_id = IdAssigner.NULL_UUID;
		m_brg_id = IdAssigner.NULL_UUID;
		m_id = IdAssigner.NULL_UUID;
		m_attr_id = IdAssigner.NULL_UUID;
		m_tparm_id = IdAssigner.NULL_UUID;
		m_tfr_id = IdAssigner.NULL_UUID;
		m_member_id = IdAssigner.NULL_UUID;
		m_pp_id = IdAssigner.NULL_UUID;
		m_sm_id = IdAssigner.NULL_UUID;
		m_smedi_id = IdAssigner.NULL_UUID;
		m_dim_id = idAssigner.createUUID();
		m_var_id = IdAssigner.NULL_UUID;
		m_dt_id = IdAssigner.NULL_UUID;
		m_obj_id = IdAssigner.NULL_UUID;
		m_sync_id = IdAssigner.NULL_UUID;
		setUniqueId(m_dim_id);
		Object[] key = {m_dim_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_dim_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_dim_id != p_newKey) {

			m_dim_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Dimensions_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Dimensions_c)) {
			return false;
		}

		Dimensions_c me = (Dimensions_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if ((IdAssigner.NULL_UUID.equals(getDim_id()) || IdAssigner.NULL_UUID
				.equals(((Dimensions_c) elem).getDim_id())) && this != elem) {
			return false;
		}
		if (!getDim_id().equals(((Dimensions_c) elem).getDim_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Dimensions_c)) {
			return false;
		}

		Dimensions_c me = (Dimensions_c) elem;
		if (!getDim_id().equals(((Dimensions_c) elem).getDim_id()))
			return false;
		return true;
	}

	// Attributes
	private int m_elementcount;
	private java.util.UUID m_sparm_id;
	private java.util.UUID m_bparm_id;
	private java.util.UUID m_brg_id;
	private java.util.UUID m_id;
	private java.util.UUID m_attr_id;
	private java.util.UUID m_tparm_id;
	private java.util.UUID m_tfr_id;
	private java.util.UUID m_member_id;
	private java.util.UUID m_pp_id;
	private java.util.UUID m_sm_id;
	private java.util.UUID m_smedi_id;
	private int m_dimensioncount;
	private java.util.UUID m_dim_id;
	private long m_dim_idLongBased;
	private java.util.UUID m_var_id;
	private java.util.UUID m_dt_id;
	private java.util.UUID m_obj_id;
	private java.util.UUID m_sync_id;

	// declare association references from this class

	// referring navigation

	StructureMember_c SpecifiesOccurrencesOfStructureMember;
	public void relateAcrossR53To(StructureMember_c target) {
		relateAcrossR53To(target, true);
	}
	public void relateAcrossR53To(StructureMember_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SpecifiesOccurrencesOfStructureMember)
			return; // already related

		if (SpecifiesOccurrencesOfStructureMember != target) {

			Object oldKey = getInstanceKey();

			if (SpecifiesOccurrencesOfStructureMember != null) {

				SpecifiesOccurrencesOfStructureMember
						.clearBackPointerR53To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Dimensions_c.relateAcrossR53To(StructureMember_c target)",
									"Relate performed across R53 from Dimensions to Structure Member without unrelate of prior instance.");
				}
			}

			SpecifiesOccurrencesOfStructureMember = target;
			m_member_id = target.getMember_id();
			if (IdAssigner.NULL_UUID.equals(target.getParent_dt_dt_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_dt_id = target.getParent_dt_dt_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR53To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "53", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR53From(StructureMember_c target) {
		unrelateAcrossR53From(target, true);
	}
	public void unrelateAcrossR53From(StructureMember_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SpecifiesOccurrencesOfStructureMember == null)
			return; // already unrelated

		if (target != SpecifiesOccurrencesOfStructureMember) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin
					.logError(
							"Tried to unrelate from non-related instance across R53",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR53To(this);
		}

		if (SpecifiesOccurrencesOfStructureMember != null) {

			m_member_id = SpecifiesOccurrencesOfStructureMember.getMember_id();
			m_dt_id = SpecifiesOccurrencesOfStructureMember
					.getParent_dt_dt_id();
			if (IdAssigner.NULL_UUID.equals(m_dt_id)) {
				m_dt_id = SpecifiesOccurrencesOfStructureMember
						.getParent_dt_dt_idCachedValue();
			}
			SpecifiesOccurrencesOfStructureMember = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "53", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Dimensions_c getOneS_DIMOnR53(StructureMember_c[] targets) {
		return getOneS_DIMOnR53(targets, null);
	}

	public static Dimensions_c getOneS_DIMOnR53(StructureMember_c[] targets,
			ClassQueryInterface_c test) {
		Dimensions_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_DIMOnR53(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Dimensions_c getOneS_DIMOnR53(StructureMember_c target) {
		return getOneS_DIMOnR53(target, null);
	}

	public static Dimensions_c getOneS_DIMOnR53(StructureMember_c target,
			boolean loadComponent) {
		return getOneS_DIMOnR53(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Dimensions_c getOneS_DIMOnR53(StructureMember_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_DIMOnR53(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Dimensions_c getOneS_DIMOnR53(ModelRoot modelRoot,
			StructureMember_c target, ClassQueryInterface_c test) {
		return getOneS_DIMOnR53(modelRoot, target, test, true);
	}

	public static Dimensions_c getOneS_DIMOnR53(ModelRoot modelRoot,
			StructureMember_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneS_DIMOnR53(modelRoot, target, test);
	}
	private static Dimensions_c find_getOneS_DIMOnR53(ModelRoot modelRoot,
			StructureMember_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MayHaveDimensionsMayHave_R53) {
				for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R53
						.size(); ++i) {
					Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R53
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Dimensions_c[] getManyS_DIMsOnR53(StructureMember_c[] targets) {
		return getManyS_DIMsOnR53(targets, null);
	}
	public static Dimensions_c[] getManyS_DIMsOnR53(
			StructureMember_c[] targets, boolean loadComponent) {
		return getManyS_DIMsOnR53(targets, null, loadComponent);
	}
	public static Dimensions_c[] getManyS_DIMsOnR53(
			StructureMember_c[] targets, ClassQueryInterface_c test) {
		return getManyS_DIMsOnR53(targets, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR53(
			StructureMember_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MayHaveDimensionsMayHave_R53) {
				for (int j = 0; j < targets[i].backPointer_MayHaveDimensionsMayHave_R53
						.size(); ++j) {
					Dimensions_c source = (Dimensions_c) targets[i].backPointer_MayHaveDimensionsMayHave_R53
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	public static Dimensions_c[] getManyS_DIMsOnR53(StructureMember_c target) {
		return getManyS_DIMsOnR53(target, null);
	}

	public static Dimensions_c[] getManyS_DIMsOnR53(StructureMember_c target,
			boolean loadComponent) {
		return getManyS_DIMsOnR53(target, null, loadComponent);
	}

	public static Dimensions_c[] getManyS_DIMsOnR53(StructureMember_c target,
			ClassQueryInterface_c test) {
		return getManyS_DIMsOnR53(target, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR53(StructureMember_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MayHaveDimensionsMayHave_R53) {
			for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R53
					.size(); ++i) {
				Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R53
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	// referring navigation

	FunctionParameter_c SpecifiesOccurrencesOfFunctionParameter;
	public void relateAcrossR52To(FunctionParameter_c target) {
		relateAcrossR52To(target, true);
	}
	public void relateAcrossR52To(FunctionParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SpecifiesOccurrencesOfFunctionParameter)
			return; // already related

		if (SpecifiesOccurrencesOfFunctionParameter != target) {

			Object oldKey = getInstanceKey();

			if (SpecifiesOccurrencesOfFunctionParameter != null) {

				SpecifiesOccurrencesOfFunctionParameter
						.clearBackPointerR52To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Dimensions_c.relateAcrossR52To(FunctionParameter_c target)",
									"Relate performed across R52 from Dimensions to Function Parameter without unrelate of prior instance.");
				}
			}

			SpecifiesOccurrencesOfFunctionParameter = target;
			m_sparm_id = target.getSparm_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR52To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "52", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR52From(FunctionParameter_c target) {
		unrelateAcrossR52From(target, true);
	}
	public void unrelateAcrossR52From(FunctionParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SpecifiesOccurrencesOfFunctionParameter == null)
			return; // already unrelated

		if (target != SpecifiesOccurrencesOfFunctionParameter) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin
					.logError(
							"Tried to unrelate from non-related instance across R52",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR52To(this);
		}

		if (SpecifiesOccurrencesOfFunctionParameter != null) {

			m_sparm_id = SpecifiesOccurrencesOfFunctionParameter.getSparm_id();
			SpecifiesOccurrencesOfFunctionParameter = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "52", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Dimensions_c getOneS_DIMOnR52(FunctionParameter_c[] targets) {
		return getOneS_DIMOnR52(targets, null);
	}

	public static Dimensions_c getOneS_DIMOnR52(FunctionParameter_c[] targets,
			ClassQueryInterface_c test) {
		Dimensions_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_DIMOnR52(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Dimensions_c getOneS_DIMOnR52(FunctionParameter_c target) {
		return getOneS_DIMOnR52(target, null);
	}

	public static Dimensions_c getOneS_DIMOnR52(FunctionParameter_c target,
			boolean loadComponent) {
		return getOneS_DIMOnR52(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Dimensions_c getOneS_DIMOnR52(FunctionParameter_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_DIMOnR52(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Dimensions_c getOneS_DIMOnR52(ModelRoot modelRoot,
			FunctionParameter_c target, ClassQueryInterface_c test) {
		return getOneS_DIMOnR52(modelRoot, target, test, true);
	}

	public static Dimensions_c getOneS_DIMOnR52(ModelRoot modelRoot,
			FunctionParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneS_DIMOnR52(modelRoot, target, test);
	}
	private static Dimensions_c find_getOneS_DIMOnR52(ModelRoot modelRoot,
			FunctionParameter_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MayHaveDimensionsMayHave_R52) {
				for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R52
						.size(); ++i) {
					Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R52
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Dimensions_c[] getManyS_DIMsOnR52(
			FunctionParameter_c[] targets) {
		return getManyS_DIMsOnR52(targets, null);
	}
	public static Dimensions_c[] getManyS_DIMsOnR52(
			FunctionParameter_c[] targets, boolean loadComponent) {
		return getManyS_DIMsOnR52(targets, null, loadComponent);
	}
	public static Dimensions_c[] getManyS_DIMsOnR52(
			FunctionParameter_c[] targets, ClassQueryInterface_c test) {
		return getManyS_DIMsOnR52(targets, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR52(
			FunctionParameter_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MayHaveDimensionsMayHave_R52) {
				for (int j = 0; j < targets[i].backPointer_MayHaveDimensionsMayHave_R52
						.size(); ++j) {
					Dimensions_c source = (Dimensions_c) targets[i].backPointer_MayHaveDimensionsMayHave_R52
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	public static Dimensions_c[] getManyS_DIMsOnR52(FunctionParameter_c target) {
		return getManyS_DIMsOnR52(target, null);
	}

	public static Dimensions_c[] getManyS_DIMsOnR52(FunctionParameter_c target,
			boolean loadComponent) {
		return getManyS_DIMsOnR52(target, null, loadComponent);
	}

	public static Dimensions_c[] getManyS_DIMsOnR52(FunctionParameter_c target,
			ClassQueryInterface_c test) {
		return getManyS_DIMsOnR52(target, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR52(FunctionParameter_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MayHaveDimensionsMayHave_R52) {
			for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R52
					.size(); ++i) {
				Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R52
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	// referring navigation

	Function_c DefinesReturnValueDimensionsForFunction;
	public void relateAcrossR51To(Function_c target) {
		relateAcrossR51To(target, true);
	}
	public void relateAcrossR51To(Function_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == DefinesReturnValueDimensionsForFunction)
			return; // already related

		if (DefinesReturnValueDimensionsForFunction != target) {

			Object oldKey = getInstanceKey();

			if (DefinesReturnValueDimensionsForFunction != null) {

				DefinesReturnValueDimensionsForFunction
						.clearBackPointerR51To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Dimensions_c.relateAcrossR51To(Function_c target)",
									"Relate performed across R51 from Dimensions to Function without unrelate of prior instance.");
				}
			}

			DefinesReturnValueDimensionsForFunction = target;
			if (IdAssigner.NULL_UUID.equals(target.getSync_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sync_id = target.getSync_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR51To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "51", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR51From(Function_c target) {
		unrelateAcrossR51From(target, true);
	}
	public void unrelateAcrossR51From(Function_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (DefinesReturnValueDimensionsForFunction == null)
			return; // already unrelated

		if (target != DefinesReturnValueDimensionsForFunction) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin
					.logError(
							"Tried to unrelate from non-related instance across R51",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR51To(this);
		}

		if (DefinesReturnValueDimensionsForFunction != null) {

			m_sync_id = DefinesReturnValueDimensionsForFunction.getSync_id();
			if (IdAssigner.NULL_UUID.equals(m_sync_id)) {
				m_sync_id = DefinesReturnValueDimensionsForFunction
						.getSync_idCachedValue();
			}
			DefinesReturnValueDimensionsForFunction = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "51", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Dimensions_c getOneS_DIMOnR51(Function_c[] targets) {
		return getOneS_DIMOnR51(targets, null);
	}

	public static Dimensions_c getOneS_DIMOnR51(Function_c[] targets,
			ClassQueryInterface_c test) {
		Dimensions_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_DIMOnR51(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Dimensions_c getOneS_DIMOnR51(Function_c target) {
		return getOneS_DIMOnR51(target, null);
	}

	public static Dimensions_c getOneS_DIMOnR51(Function_c target,
			boolean loadComponent) {
		return getOneS_DIMOnR51(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Dimensions_c getOneS_DIMOnR51(Function_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_DIMOnR51(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Dimensions_c getOneS_DIMOnR51(ModelRoot modelRoot,
			Function_c target, ClassQueryInterface_c test) {
		return getOneS_DIMOnR51(modelRoot, target, test, true);
	}

	public static Dimensions_c getOneS_DIMOnR51(ModelRoot modelRoot,
			Function_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneS_DIMOnR51(modelRoot, target, test);
	}
	private static Dimensions_c find_getOneS_DIMOnR51(ModelRoot modelRoot,
			Function_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R51) {
				for (int i = 0; i < target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R51
						.size(); ++i) {
					Dimensions_c source = (Dimensions_c) target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R51
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Dimensions_c[] getManyS_DIMsOnR51(Function_c[] targets) {
		return getManyS_DIMsOnR51(targets, null);
	}
	public static Dimensions_c[] getManyS_DIMsOnR51(Function_c[] targets,
			boolean loadComponent) {
		return getManyS_DIMsOnR51(targets, null, loadComponent);
	}
	public static Dimensions_c[] getManyS_DIMsOnR51(Function_c[] targets,
			ClassQueryInterface_c test) {
		return getManyS_DIMsOnR51(targets, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR51(Function_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R51) {
				for (int j = 0; j < targets[i].backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R51
						.size(); ++j) {
					Dimensions_c source = (Dimensions_c) targets[i].backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R51
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	public static Dimensions_c[] getManyS_DIMsOnR51(Function_c target) {
		return getManyS_DIMsOnR51(target, null);
	}

	public static Dimensions_c[] getManyS_DIMsOnR51(Function_c target,
			boolean loadComponent) {
		return getManyS_DIMsOnR51(target, null, loadComponent);
	}

	public static Dimensions_c[] getManyS_DIMsOnR51(Function_c target,
			ClassQueryInterface_c test) {
		return getManyS_DIMsOnR51(target, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR51(Function_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R51) {
			for (int i = 0; i < target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R51
					.size(); ++i) {
				Dimensions_c source = (Dimensions_c) target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R51
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	// referring navigation

	TransientVar_c SpecifiesOccurrencesOfTransientVar;
	public void relateAcrossR844To(TransientVar_c target) {
		relateAcrossR844To(target, true);
	}
	public void relateAcrossR844To(TransientVar_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SpecifiesOccurrencesOfTransientVar)
			return; // already related

		if (SpecifiesOccurrencesOfTransientVar != target) {

			Object oldKey = getInstanceKey();

			if (SpecifiesOccurrencesOfTransientVar != null) {

				SpecifiesOccurrencesOfTransientVar.clearBackPointerR844To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Dimensions_c.relateAcrossR844To(TransientVar_c target)",
									"Relate performed across R844 from Dimensions to Transient Var without unrelate of prior instance.");
				}
			}

			SpecifiesOccurrencesOfTransientVar = target;
			if (IdAssigner.NULL_UUID.equals(target.getVar_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_var_id = target.getVar_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR844To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "844", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR844From(TransientVar_c target) {
		unrelateAcrossR844From(target, true);
	}
	public void unrelateAcrossR844From(TransientVar_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SpecifiesOccurrencesOfTransientVar == null)
			return; // already unrelated

		if (target != SpecifiesOccurrencesOfTransientVar) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R844",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR844To(this);
		}

		if (SpecifiesOccurrencesOfTransientVar != null) {

			m_var_id = SpecifiesOccurrencesOfTransientVar.getVar_id();
			if (IdAssigner.NULL_UUID.equals(m_var_id)) {
				m_var_id = SpecifiesOccurrencesOfTransientVar
						.getVar_idCachedValue();
			}
			SpecifiesOccurrencesOfTransientVar = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "844", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Dimensions_c getOneS_DIMOnR844(TransientVar_c[] targets) {
		return getOneS_DIMOnR844(targets, null);
	}

	public static Dimensions_c getOneS_DIMOnR844(TransientVar_c[] targets,
			ClassQueryInterface_c test) {
		Dimensions_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_DIMOnR844(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Dimensions_c getOneS_DIMOnR844(TransientVar_c target) {
		return getOneS_DIMOnR844(target, null);
	}

	public static Dimensions_c getOneS_DIMOnR844(TransientVar_c target,
			boolean loadComponent) {
		return getOneS_DIMOnR844(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Dimensions_c getOneS_DIMOnR844(TransientVar_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_DIMOnR844(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Dimensions_c getOneS_DIMOnR844(ModelRoot modelRoot,
			TransientVar_c target, ClassQueryInterface_c test) {
		return getOneS_DIMOnR844(modelRoot, target, test, true);
	}

	public static Dimensions_c getOneS_DIMOnR844(ModelRoot modelRoot,
			TransientVar_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneS_DIMOnR844(modelRoot, target, test);
	}
	private static Dimensions_c find_getOneS_DIMOnR844(ModelRoot modelRoot,
			TransientVar_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MayHaveDimensionsMayHave_R844) {
				for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R844
						.size(); ++i) {
					Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R844
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Dimensions_c[] getManyS_DIMsOnR844(TransientVar_c[] targets) {
		return getManyS_DIMsOnR844(targets, null);
	}
	public static Dimensions_c[] getManyS_DIMsOnR844(TransientVar_c[] targets,
			boolean loadComponent) {
		return getManyS_DIMsOnR844(targets, null, loadComponent);
	}
	public static Dimensions_c[] getManyS_DIMsOnR844(TransientVar_c[] targets,
			ClassQueryInterface_c test) {
		return getManyS_DIMsOnR844(targets, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR844(TransientVar_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MayHaveDimensionsMayHave_R844) {
				for (int j = 0; j < targets[i].backPointer_MayHaveDimensionsMayHave_R844
						.size(); ++j) {
					Dimensions_c source = (Dimensions_c) targets[i].backPointer_MayHaveDimensionsMayHave_R844
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	public static Dimensions_c[] getManyS_DIMsOnR844(TransientVar_c target) {
		return getManyS_DIMsOnR844(target, null);
	}

	public static Dimensions_c[] getManyS_DIMsOnR844(TransientVar_c target,
			boolean loadComponent) {
		return getManyS_DIMsOnR844(target, null, loadComponent);
	}

	public static Dimensions_c[] getManyS_DIMsOnR844(TransientVar_c target,
			ClassQueryInterface_c test) {
		return getManyS_DIMsOnR844(target, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR844(TransientVar_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MayHaveDimensionsMayHave_R844) {
			for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R844
					.size(); ++i) {
				Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R844
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	// referring navigation

	Variable_c SpecifiesOccurrencesOfVariable;
	public void relateAcrossR849To(Variable_c target) {
		relateAcrossR849To(target, true);
	}
	public void relateAcrossR849To(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SpecifiesOccurrencesOfVariable)
			return; // already related

		if (SpecifiesOccurrencesOfVariable != target) {

			Object oldKey = getInstanceKey();

			if (SpecifiesOccurrencesOfVariable != null) {

				SpecifiesOccurrencesOfVariable.clearBackPointerR849To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Dimensions_c.relateAcrossR849To(Variable_c target)",
									"Relate performed across R849 from Dimensions to Variable without unrelate of prior instance.");
				}
			}

			SpecifiesOccurrencesOfVariable = target;
			m_var_id = target.getVar_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR849To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "849", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR849From(Variable_c target) {
		unrelateAcrossR849From(target, true);
	}
	public void unrelateAcrossR849From(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (SpecifiesOccurrencesOfVariable == null)
			return; // already unrelated

		if (target != SpecifiesOccurrencesOfVariable) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R849",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR849To(this);
		}

		if (SpecifiesOccurrencesOfVariable != null) {

			m_var_id = SpecifiesOccurrencesOfVariable.getVar_id();
			SpecifiesOccurrencesOfVariable = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "849", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Dimensions_c getOneS_DIMOnR849(Variable_c[] targets) {
		return getOneS_DIMOnR849(targets, null);
	}

	public static Dimensions_c getOneS_DIMOnR849(Variable_c[] targets,
			ClassQueryInterface_c test) {
		Dimensions_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_DIMOnR849(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Dimensions_c getOneS_DIMOnR849(Variable_c target) {
		return getOneS_DIMOnR849(target, null);
	}

	public static Dimensions_c getOneS_DIMOnR849(Variable_c target,
			boolean loadComponent) {
		return getOneS_DIMOnR849(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Dimensions_c getOneS_DIMOnR849(Variable_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_DIMOnR849(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Dimensions_c getOneS_DIMOnR849(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test) {
		return getOneS_DIMOnR849(modelRoot, target, test, true);
	}

	public static Dimensions_c getOneS_DIMOnR849(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneS_DIMOnR849(modelRoot, target, test);
	}
	private static Dimensions_c find_getOneS_DIMOnR849(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MayHaveDimensionsMayHave_R849) {
				for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R849
						.size(); ++i) {
					Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R849
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Dimensions_c[] getManyS_DIMsOnR849(Variable_c[] targets) {
		return getManyS_DIMsOnR849(targets, null);
	}
	public static Dimensions_c[] getManyS_DIMsOnR849(Variable_c[] targets,
			boolean loadComponent) {
		return getManyS_DIMsOnR849(targets, null, loadComponent);
	}
	public static Dimensions_c[] getManyS_DIMsOnR849(Variable_c[] targets,
			ClassQueryInterface_c test) {
		return getManyS_DIMsOnR849(targets, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR849(Variable_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MayHaveDimensionsMayHave_R849) {
				for (int j = 0; j < targets[i].backPointer_MayHaveDimensionsMayHave_R849
						.size(); ++j) {
					Dimensions_c source = (Dimensions_c) targets[i].backPointer_MayHaveDimensionsMayHave_R849
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	public static Dimensions_c[] getManyS_DIMsOnR849(Variable_c target) {
		return getManyS_DIMsOnR849(target, null);
	}

	public static Dimensions_c[] getManyS_DIMsOnR849(Variable_c target,
			boolean loadComponent) {
		return getManyS_DIMsOnR849(target, null, loadComponent);
	}

	public static Dimensions_c[] getManyS_DIMsOnR849(Variable_c target,
			ClassQueryInterface_c test) {
		return getManyS_DIMsOnR849(target, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR849(Variable_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MayHaveDimensionsMayHave_R849) {
			for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R849
					.size(); ++i) {
				Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R849
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	// referring navigation

	Attribute_c SpecifiesOccurrencesOfAttribute;
	public void relateAcrossR120To(Attribute_c target) {
		relateAcrossR120To(target, true);
	}
	public void relateAcrossR120To(Attribute_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SpecifiesOccurrencesOfAttribute)
			return; // already related

		if (SpecifiesOccurrencesOfAttribute != target) {

			Object oldKey = getInstanceKey();

			if (SpecifiesOccurrencesOfAttribute != null) {

				SpecifiesOccurrencesOfAttribute.clearBackPointerR120To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Dimensions_c.relateAcrossR120To(Attribute_c target)",
									"Relate performed across R120 from Dimensions to Attribute without unrelate of prior instance.");
				}
			}

			SpecifiesOccurrencesOfAttribute = target;
			m_attr_id = target.getAttr_id();
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR120To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "120", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR120From(Attribute_c target) {
		unrelateAcrossR120From(target, true);
	}
	public void unrelateAcrossR120From(Attribute_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (SpecifiesOccurrencesOfAttribute == null)
			return; // already unrelated

		if (target != SpecifiesOccurrencesOfAttribute) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R120",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR120To(this);
		}

		if (SpecifiesOccurrencesOfAttribute != null) {

			m_attr_id = SpecifiesOccurrencesOfAttribute.getAttr_id();
			m_obj_id = SpecifiesOccurrencesOfAttribute.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = SpecifiesOccurrencesOfAttribute
						.getObj_idCachedValue();
			}
			SpecifiesOccurrencesOfAttribute = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "120", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Dimensions_c getOneS_DIMOnR120(Attribute_c[] targets) {
		return getOneS_DIMOnR120(targets, null);
	}

	public static Dimensions_c getOneS_DIMOnR120(Attribute_c[] targets,
			ClassQueryInterface_c test) {
		Dimensions_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_DIMOnR120(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Dimensions_c getOneS_DIMOnR120(Attribute_c target) {
		return getOneS_DIMOnR120(target, null);
	}

	public static Dimensions_c getOneS_DIMOnR120(Attribute_c target,
			boolean loadComponent) {
		return getOneS_DIMOnR120(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Dimensions_c getOneS_DIMOnR120(Attribute_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_DIMOnR120(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Dimensions_c getOneS_DIMOnR120(ModelRoot modelRoot,
			Attribute_c target, ClassQueryInterface_c test) {
		return getOneS_DIMOnR120(modelRoot, target, test, true);
	}

	public static Dimensions_c getOneS_DIMOnR120(ModelRoot modelRoot,
			Attribute_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneS_DIMOnR120(modelRoot, target, test);
	}
	private static Dimensions_c find_getOneS_DIMOnR120(ModelRoot modelRoot,
			Attribute_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MayHaveDimensionsMayHave_R120) {
				for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R120
						.size(); ++i) {
					Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R120
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Dimensions_c[] getManyS_DIMsOnR120(Attribute_c[] targets) {
		return getManyS_DIMsOnR120(targets, null);
	}
	public static Dimensions_c[] getManyS_DIMsOnR120(Attribute_c[] targets,
			boolean loadComponent) {
		return getManyS_DIMsOnR120(targets, null, loadComponent);
	}
	public static Dimensions_c[] getManyS_DIMsOnR120(Attribute_c[] targets,
			ClassQueryInterface_c test) {
		return getManyS_DIMsOnR120(targets, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR120(Attribute_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MayHaveDimensionsMayHave_R120) {
				for (int j = 0; j < targets[i].backPointer_MayHaveDimensionsMayHave_R120
						.size(); ++j) {
					Dimensions_c source = (Dimensions_c) targets[i].backPointer_MayHaveDimensionsMayHave_R120
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	public static Dimensions_c[] getManyS_DIMsOnR120(Attribute_c target) {
		return getManyS_DIMsOnR120(target, null);
	}

	public static Dimensions_c[] getManyS_DIMsOnR120(Attribute_c target,
			boolean loadComponent) {
		return getManyS_DIMsOnR120(target, null, loadComponent);
	}

	public static Dimensions_c[] getManyS_DIMsOnR120(Attribute_c target,
			ClassQueryInterface_c test) {
		return getManyS_DIMsOnR120(target, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR120(Attribute_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MayHaveDimensionsMayHave_R120) {
			for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R120
					.size(); ++i) {
				Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R120
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	// referring navigation

	OperationParameter_c SpecifiesOccurrencesOfOperationParameter;
	public void relateAcrossR121To(OperationParameter_c target) {
		relateAcrossR121To(target, true);
	}
	public void relateAcrossR121To(OperationParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SpecifiesOccurrencesOfOperationParameter)
			return; // already related

		if (SpecifiesOccurrencesOfOperationParameter != target) {

			Object oldKey = getInstanceKey();

			if (SpecifiesOccurrencesOfOperationParameter != null) {

				SpecifiesOccurrencesOfOperationParameter
						.clearBackPointerR121To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Dimensions_c.relateAcrossR121To(OperationParameter_c target)",
									"Relate performed across R121 from Dimensions to Operation Parameter without unrelate of prior instance.");
				}
			}

			SpecifiesOccurrencesOfOperationParameter = target;
			m_tparm_id = target.getTparm_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR121To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "121", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR121From(OperationParameter_c target) {
		unrelateAcrossR121From(target, true);
	}
	public void unrelateAcrossR121From(OperationParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SpecifiesOccurrencesOfOperationParameter == null)
			return; // already unrelated

		if (target != SpecifiesOccurrencesOfOperationParameter) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R121",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR121To(this);
		}

		if (SpecifiesOccurrencesOfOperationParameter != null) {

			m_tparm_id = SpecifiesOccurrencesOfOperationParameter.getTparm_id();
			SpecifiesOccurrencesOfOperationParameter = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "121", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Dimensions_c getOneS_DIMOnR121(OperationParameter_c[] targets) {
		return getOneS_DIMOnR121(targets, null);
	}

	public static Dimensions_c getOneS_DIMOnR121(
			OperationParameter_c[] targets, ClassQueryInterface_c test) {
		Dimensions_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_DIMOnR121(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Dimensions_c getOneS_DIMOnR121(OperationParameter_c target) {
		return getOneS_DIMOnR121(target, null);
	}

	public static Dimensions_c getOneS_DIMOnR121(OperationParameter_c target,
			boolean loadComponent) {
		return getOneS_DIMOnR121(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Dimensions_c getOneS_DIMOnR121(OperationParameter_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_DIMOnR121(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Dimensions_c getOneS_DIMOnR121(ModelRoot modelRoot,
			OperationParameter_c target, ClassQueryInterface_c test) {
		return getOneS_DIMOnR121(modelRoot, target, test, true);
	}

	public static Dimensions_c getOneS_DIMOnR121(ModelRoot modelRoot,
			OperationParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneS_DIMOnR121(modelRoot, target, test);
	}
	private static Dimensions_c find_getOneS_DIMOnR121(ModelRoot modelRoot,
			OperationParameter_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MayHaveDimensionsMayHave_R121) {
				for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R121
						.size(); ++i) {
					Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R121
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Dimensions_c[] getManyS_DIMsOnR121(
			OperationParameter_c[] targets) {
		return getManyS_DIMsOnR121(targets, null);
	}
	public static Dimensions_c[] getManyS_DIMsOnR121(
			OperationParameter_c[] targets, boolean loadComponent) {
		return getManyS_DIMsOnR121(targets, null, loadComponent);
	}
	public static Dimensions_c[] getManyS_DIMsOnR121(
			OperationParameter_c[] targets, ClassQueryInterface_c test) {
		return getManyS_DIMsOnR121(targets, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR121(
			OperationParameter_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MayHaveDimensionsMayHave_R121) {
				for (int j = 0; j < targets[i].backPointer_MayHaveDimensionsMayHave_R121
						.size(); ++j) {
					Dimensions_c source = (Dimensions_c) targets[i].backPointer_MayHaveDimensionsMayHave_R121
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	public static Dimensions_c[] getManyS_DIMsOnR121(OperationParameter_c target) {
		return getManyS_DIMsOnR121(target, null);
	}

	public static Dimensions_c[] getManyS_DIMsOnR121(
			OperationParameter_c target, boolean loadComponent) {
		return getManyS_DIMsOnR121(target, null, loadComponent);
	}

	public static Dimensions_c[] getManyS_DIMsOnR121(
			OperationParameter_c target, ClassQueryInterface_c test) {
		return getManyS_DIMsOnR121(target, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR121(
			OperationParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MayHaveDimensionsMayHave_R121) {
			for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R121
					.size(); ++i) {
				Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R121
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	// referring navigation

	Operation_c DefinesReturnValueDimensionsForOperation;
	public void relateAcrossR122To(Operation_c target) {
		relateAcrossR122To(target, true);
	}
	public void relateAcrossR122To(Operation_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == DefinesReturnValueDimensionsForOperation)
			return; // already related

		if (DefinesReturnValueDimensionsForOperation != target) {

			Object oldKey = getInstanceKey();

			if (DefinesReturnValueDimensionsForOperation != null) {

				DefinesReturnValueDimensionsForOperation
						.clearBackPointerR122To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Dimensions_c.relateAcrossR122To(Operation_c target)",
									"Relate performed across R122 from Dimensions to Operation without unrelate of prior instance.");
				}
			}

			DefinesReturnValueDimensionsForOperation = target;
			m_tfr_id = target.getTfr_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR122To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "122", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR122From(Operation_c target) {
		unrelateAcrossR122From(target, true);
	}
	public void unrelateAcrossR122From(Operation_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (DefinesReturnValueDimensionsForOperation == null)
			return; // already unrelated

		if (target != DefinesReturnValueDimensionsForOperation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R122",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR122To(this);
		}

		if (DefinesReturnValueDimensionsForOperation != null) {

			m_tfr_id = DefinesReturnValueDimensionsForOperation.getTfr_id();
			DefinesReturnValueDimensionsForOperation = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "122", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Dimensions_c getOneS_DIMOnR122(Operation_c[] targets) {
		return getOneS_DIMOnR122(targets, null);
	}

	public static Dimensions_c getOneS_DIMOnR122(Operation_c[] targets,
			ClassQueryInterface_c test) {
		Dimensions_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_DIMOnR122(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Dimensions_c getOneS_DIMOnR122(Operation_c target) {
		return getOneS_DIMOnR122(target, null);
	}

	public static Dimensions_c getOneS_DIMOnR122(Operation_c target,
			boolean loadComponent) {
		return getOneS_DIMOnR122(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Dimensions_c getOneS_DIMOnR122(Operation_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_DIMOnR122(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Dimensions_c getOneS_DIMOnR122(ModelRoot modelRoot,
			Operation_c target, ClassQueryInterface_c test) {
		return getOneS_DIMOnR122(modelRoot, target, test, true);
	}

	public static Dimensions_c getOneS_DIMOnR122(ModelRoot modelRoot,
			Operation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneS_DIMOnR122(modelRoot, target, test);
	}
	private static Dimensions_c find_getOneS_DIMOnR122(ModelRoot modelRoot,
			Operation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R122) {
				for (int i = 0; i < target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R122
						.size(); ++i) {
					Dimensions_c source = (Dimensions_c) target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R122
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Dimensions_c[] getManyS_DIMsOnR122(Operation_c[] targets) {
		return getManyS_DIMsOnR122(targets, null);
	}
	public static Dimensions_c[] getManyS_DIMsOnR122(Operation_c[] targets,
			boolean loadComponent) {
		return getManyS_DIMsOnR122(targets, null, loadComponent);
	}
	public static Dimensions_c[] getManyS_DIMsOnR122(Operation_c[] targets,
			ClassQueryInterface_c test) {
		return getManyS_DIMsOnR122(targets, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR122(Operation_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R122) {
				for (int j = 0; j < targets[i].backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R122
						.size(); ++j) {
					Dimensions_c source = (Dimensions_c) targets[i].backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R122
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	public static Dimensions_c[] getManyS_DIMsOnR122(Operation_c target) {
		return getManyS_DIMsOnR122(target, null);
	}

	public static Dimensions_c[] getManyS_DIMsOnR122(Operation_c target,
			boolean loadComponent) {
		return getManyS_DIMsOnR122(target, null, loadComponent);
	}

	public static Dimensions_c[] getManyS_DIMsOnR122(Operation_c target,
			ClassQueryInterface_c test) {
		return getManyS_DIMsOnR122(target, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR122(Operation_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R122) {
			for (int i = 0; i < target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R122
					.size(); ++i) {
				Dimensions_c source = (Dimensions_c) target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R122
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	// referring navigation

	StateMachineEventDataItem_c SpecifiesOccurrencesOfStateMachineEventDataItem;
	public void relateAcrossR531To(StateMachineEventDataItem_c target) {
		relateAcrossR531To(target, true);
	}
	public void relateAcrossR531To(StateMachineEventDataItem_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SpecifiesOccurrencesOfStateMachineEventDataItem)
			return; // already related

		if (SpecifiesOccurrencesOfStateMachineEventDataItem != target) {

			Object oldKey = getInstanceKey();

			if (SpecifiesOccurrencesOfStateMachineEventDataItem != null) {

				SpecifiesOccurrencesOfStateMachineEventDataItem
						.clearBackPointerR531To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Dimensions_c.relateAcrossR531To(StateMachineEventDataItem_c target)",
									"Relate performed across R531 from Dimensions to State Machine Event Data Item without unrelate of prior instance.");
				}
			}

			SpecifiesOccurrencesOfStateMachineEventDataItem = target;
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			m_smedi_id = target.getSmedi_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR531To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "531", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR531From(StateMachineEventDataItem_c target) {
		unrelateAcrossR531From(target, true);
	}
	public void unrelateAcrossR531From(StateMachineEventDataItem_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SpecifiesOccurrencesOfStateMachineEventDataItem == null)
			return; // already unrelated

		if (target != SpecifiesOccurrencesOfStateMachineEventDataItem) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R531",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR531To(this);
		}

		if (SpecifiesOccurrencesOfStateMachineEventDataItem != null) {

			m_sm_id = SpecifiesOccurrencesOfStateMachineEventDataItem
					.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = SpecifiesOccurrencesOfStateMachineEventDataItem
						.getSm_idCachedValue();
			}
			m_smedi_id = SpecifiesOccurrencesOfStateMachineEventDataItem
					.getSmedi_id();
			SpecifiesOccurrencesOfStateMachineEventDataItem = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "531", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Dimensions_c getOneS_DIMOnR531(
			StateMachineEventDataItem_c[] targets) {
		return getOneS_DIMOnR531(targets, null);
	}

	public static Dimensions_c getOneS_DIMOnR531(
			StateMachineEventDataItem_c[] targets, ClassQueryInterface_c test) {
		Dimensions_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_DIMOnR531(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Dimensions_c getOneS_DIMOnR531(
			StateMachineEventDataItem_c target) {
		return getOneS_DIMOnR531(target, null);
	}

	public static Dimensions_c getOneS_DIMOnR531(
			StateMachineEventDataItem_c target, boolean loadComponent) {
		return getOneS_DIMOnR531(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Dimensions_c getOneS_DIMOnR531(
			StateMachineEventDataItem_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_DIMOnR531(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Dimensions_c getOneS_DIMOnR531(ModelRoot modelRoot,
			StateMachineEventDataItem_c target, ClassQueryInterface_c test) {
		return getOneS_DIMOnR531(modelRoot, target, test, true);
	}

	public static Dimensions_c getOneS_DIMOnR531(ModelRoot modelRoot,
			StateMachineEventDataItem_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneS_DIMOnR531(modelRoot, target, test);
	}
	private static Dimensions_c find_getOneS_DIMOnR531(ModelRoot modelRoot,
			StateMachineEventDataItem_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MayHaveDimensionsMayHave_R531) {
				for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R531
						.size(); ++i) {
					Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R531
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Dimensions_c[] getManyS_DIMsOnR531(
			StateMachineEventDataItem_c[] targets) {
		return getManyS_DIMsOnR531(targets, null);
	}
	public static Dimensions_c[] getManyS_DIMsOnR531(
			StateMachineEventDataItem_c[] targets, boolean loadComponent) {
		return getManyS_DIMsOnR531(targets, null, loadComponent);
	}
	public static Dimensions_c[] getManyS_DIMsOnR531(
			StateMachineEventDataItem_c[] targets, ClassQueryInterface_c test) {
		return getManyS_DIMsOnR531(targets, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR531(
			StateMachineEventDataItem_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MayHaveDimensionsMayHave_R531) {
				for (int j = 0; j < targets[i].backPointer_MayHaveDimensionsMayHave_R531
						.size(); ++j) {
					Dimensions_c source = (Dimensions_c) targets[i].backPointer_MayHaveDimensionsMayHave_R531
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	public static Dimensions_c[] getManyS_DIMsOnR531(
			StateMachineEventDataItem_c target) {
		return getManyS_DIMsOnR531(target, null);
	}

	public static Dimensions_c[] getManyS_DIMsOnR531(
			StateMachineEventDataItem_c target, boolean loadComponent) {
		return getManyS_DIMsOnR531(target, null, loadComponent);
	}

	public static Dimensions_c[] getManyS_DIMsOnR531(
			StateMachineEventDataItem_c target, ClassQueryInterface_c test) {
		return getManyS_DIMsOnR531(target, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR531(
			StateMachineEventDataItem_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MayHaveDimensionsMayHave_R531) {
			for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R531
					.size(); ++i) {
				Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R531
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	// referring navigation

	BridgeParameter_c SpecifiesOccurrencesOfBridgeParameter;
	public void relateAcrossR49To(BridgeParameter_c target) {
		relateAcrossR49To(target, true);
	}
	public void relateAcrossR49To(BridgeParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SpecifiesOccurrencesOfBridgeParameter)
			return; // already related

		if (SpecifiesOccurrencesOfBridgeParameter != target) {

			Object oldKey = getInstanceKey();

			if (SpecifiesOccurrencesOfBridgeParameter != null) {

				SpecifiesOccurrencesOfBridgeParameter
						.clearBackPointerR49To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Dimensions_c.relateAcrossR49To(BridgeParameter_c target)",
									"Relate performed across R49 from Dimensions to Bridge Parameter without unrelate of prior instance.");
				}
			}

			SpecifiesOccurrencesOfBridgeParameter = target;
			m_bparm_id = target.getBparm_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR49To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "49", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR49From(BridgeParameter_c target) {
		unrelateAcrossR49From(target, true);
	}
	public void unrelateAcrossR49From(BridgeParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SpecifiesOccurrencesOfBridgeParameter == null)
			return; // already unrelated

		if (target != SpecifiesOccurrencesOfBridgeParameter) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin
					.logError(
							"Tried to unrelate from non-related instance across R49",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR49To(this);
		}

		if (SpecifiesOccurrencesOfBridgeParameter != null) {

			m_bparm_id = SpecifiesOccurrencesOfBridgeParameter.getBparm_id();
			SpecifiesOccurrencesOfBridgeParameter = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "49", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Dimensions_c getOneS_DIMOnR49(BridgeParameter_c[] targets) {
		return getOneS_DIMOnR49(targets, null);
	}

	public static Dimensions_c getOneS_DIMOnR49(BridgeParameter_c[] targets,
			ClassQueryInterface_c test) {
		Dimensions_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_DIMOnR49(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Dimensions_c getOneS_DIMOnR49(BridgeParameter_c target) {
		return getOneS_DIMOnR49(target, null);
	}

	public static Dimensions_c getOneS_DIMOnR49(BridgeParameter_c target,
			boolean loadComponent) {
		return getOneS_DIMOnR49(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Dimensions_c getOneS_DIMOnR49(BridgeParameter_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_DIMOnR49(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Dimensions_c getOneS_DIMOnR49(ModelRoot modelRoot,
			BridgeParameter_c target, ClassQueryInterface_c test) {
		return getOneS_DIMOnR49(modelRoot, target, test, true);
	}

	public static Dimensions_c getOneS_DIMOnR49(ModelRoot modelRoot,
			BridgeParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneS_DIMOnR49(modelRoot, target, test);
	}
	private static Dimensions_c find_getOneS_DIMOnR49(ModelRoot modelRoot,
			BridgeParameter_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MayHaveDimensionsMayHave_R49) {
				for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R49
						.size(); ++i) {
					Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R49
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Dimensions_c[] getManyS_DIMsOnR49(BridgeParameter_c[] targets) {
		return getManyS_DIMsOnR49(targets, null);
	}
	public static Dimensions_c[] getManyS_DIMsOnR49(
			BridgeParameter_c[] targets, boolean loadComponent) {
		return getManyS_DIMsOnR49(targets, null, loadComponent);
	}
	public static Dimensions_c[] getManyS_DIMsOnR49(
			BridgeParameter_c[] targets, ClassQueryInterface_c test) {
		return getManyS_DIMsOnR49(targets, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR49(
			BridgeParameter_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MayHaveDimensionsMayHave_R49) {
				for (int j = 0; j < targets[i].backPointer_MayHaveDimensionsMayHave_R49
						.size(); ++j) {
					Dimensions_c source = (Dimensions_c) targets[i].backPointer_MayHaveDimensionsMayHave_R49
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	public static Dimensions_c[] getManyS_DIMsOnR49(BridgeParameter_c target) {
		return getManyS_DIMsOnR49(target, null);
	}

	public static Dimensions_c[] getManyS_DIMsOnR49(BridgeParameter_c target,
			boolean loadComponent) {
		return getManyS_DIMsOnR49(target, null, loadComponent);
	}

	public static Dimensions_c[] getManyS_DIMsOnR49(BridgeParameter_c target,
			ClassQueryInterface_c test) {
		return getManyS_DIMsOnR49(target, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR49(BridgeParameter_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MayHaveDimensionsMayHave_R49) {
			for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R49
					.size(); ++i) {
				Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R49
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	// referring navigation

	Bridge_c DefinesReturnValueDimensionsForBridge;
	public void relateAcrossR50To(Bridge_c target) {
		relateAcrossR50To(target, true);
	}
	public void relateAcrossR50To(Bridge_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == DefinesReturnValueDimensionsForBridge)
			return; // already related

		if (DefinesReturnValueDimensionsForBridge != target) {

			Object oldKey = getInstanceKey();

			if (DefinesReturnValueDimensionsForBridge != null) {

				DefinesReturnValueDimensionsForBridge
						.clearBackPointerR50To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Dimensions_c.relateAcrossR50To(Bridge_c target)",
									"Relate performed across R50 from Dimensions to Bridge without unrelate of prior instance.");
				}
			}

			DefinesReturnValueDimensionsForBridge = target;
			m_brg_id = target.getBrg_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR50To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "50", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR50From(Bridge_c target) {
		unrelateAcrossR50From(target, true);
	}
	public void unrelateAcrossR50From(Bridge_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (DefinesReturnValueDimensionsForBridge == null)
			return; // already unrelated

		if (target != DefinesReturnValueDimensionsForBridge) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin
					.logError(
							"Tried to unrelate from non-related instance across R50",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR50To(this);
		}

		if (DefinesReturnValueDimensionsForBridge != null) {

			m_brg_id = DefinesReturnValueDimensionsForBridge.getBrg_id();
			DefinesReturnValueDimensionsForBridge = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "50", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Dimensions_c getOneS_DIMOnR50(Bridge_c[] targets) {
		return getOneS_DIMOnR50(targets, null);
	}

	public static Dimensions_c getOneS_DIMOnR50(Bridge_c[] targets,
			ClassQueryInterface_c test) {
		Dimensions_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_DIMOnR50(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Dimensions_c getOneS_DIMOnR50(Bridge_c target) {
		return getOneS_DIMOnR50(target, null);
	}

	public static Dimensions_c getOneS_DIMOnR50(Bridge_c target,
			boolean loadComponent) {
		return getOneS_DIMOnR50(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Dimensions_c getOneS_DIMOnR50(Bridge_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_DIMOnR50(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Dimensions_c getOneS_DIMOnR50(ModelRoot modelRoot,
			Bridge_c target, ClassQueryInterface_c test) {
		return getOneS_DIMOnR50(modelRoot, target, test, true);
	}

	public static Dimensions_c getOneS_DIMOnR50(ModelRoot modelRoot,
			Bridge_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneS_DIMOnR50(modelRoot, target, test);
	}
	private static Dimensions_c find_getOneS_DIMOnR50(ModelRoot modelRoot,
			Bridge_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R50) {
				for (int i = 0; i < target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R50
						.size(); ++i) {
					Dimensions_c source = (Dimensions_c) target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R50
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Dimensions_c[] getManyS_DIMsOnR50(Bridge_c[] targets) {
		return getManyS_DIMsOnR50(targets, null);
	}
	public static Dimensions_c[] getManyS_DIMsOnR50(Bridge_c[] targets,
			boolean loadComponent) {
		return getManyS_DIMsOnR50(targets, null, loadComponent);
	}
	public static Dimensions_c[] getManyS_DIMsOnR50(Bridge_c[] targets,
			ClassQueryInterface_c test) {
		return getManyS_DIMsOnR50(targets, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR50(Bridge_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R50) {
				for (int j = 0; j < targets[i].backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R50
						.size(); ++j) {
					Dimensions_c source = (Dimensions_c) targets[i].backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R50
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	public static Dimensions_c[] getManyS_DIMsOnR50(Bridge_c target) {
		return getManyS_DIMsOnR50(target, null);
	}

	public static Dimensions_c[] getManyS_DIMsOnR50(Bridge_c target,
			boolean loadComponent) {
		return getManyS_DIMsOnR50(target, null, loadComponent);
	}

	public static Dimensions_c[] getManyS_DIMsOnR50(Bridge_c target,
			ClassQueryInterface_c test) {
		return getManyS_DIMsOnR50(target, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR50(Bridge_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R50) {
			for (int i = 0; i < target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R50
					.size(); ++i) {
				Dimensions_c source = (Dimensions_c) target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R50
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	// referring navigation

	PropertyParameter_c SpecifiesOccurrencesOfPropertyParameter;
	public void relateAcrossR4017To(PropertyParameter_c target) {
		relateAcrossR4017To(target, true);
	}
	public void relateAcrossR4017To(PropertyParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SpecifiesOccurrencesOfPropertyParameter)
			return; // already related

		if (SpecifiesOccurrencesOfPropertyParameter != target) {

			Object oldKey = getInstanceKey();

			if (SpecifiesOccurrencesOfPropertyParameter != null) {

				SpecifiesOccurrencesOfPropertyParameter
						.clearBackPointerR4017To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Dimensions_c.relateAcrossR4017To(PropertyParameter_c target)",
									"Relate performed across R4017 from Dimensions to Property Parameter without unrelate of prior instance.");
				}
			}

			SpecifiesOccurrencesOfPropertyParameter = target;
			m_pp_id = target.getPp_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR4017To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "4017", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR4017From(PropertyParameter_c target) {
		unrelateAcrossR4017From(target, true);
	}
	public void unrelateAcrossR4017From(PropertyParameter_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (SpecifiesOccurrencesOfPropertyParameter == null)
			return; // already unrelated

		if (target != SpecifiesOccurrencesOfPropertyParameter) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R4017",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR4017To(this);
		}

		if (SpecifiesOccurrencesOfPropertyParameter != null) {

			m_pp_id = SpecifiesOccurrencesOfPropertyParameter.getPp_id();
			SpecifiesOccurrencesOfPropertyParameter = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "4017", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Dimensions_c getOneS_DIMOnR4017(PropertyParameter_c[] targets) {
		return getOneS_DIMOnR4017(targets, null);
	}

	public static Dimensions_c getOneS_DIMOnR4017(
			PropertyParameter_c[] targets, ClassQueryInterface_c test) {
		Dimensions_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_DIMOnR4017(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Dimensions_c getOneS_DIMOnR4017(PropertyParameter_c target) {
		return getOneS_DIMOnR4017(target, null);
	}

	public static Dimensions_c getOneS_DIMOnR4017(PropertyParameter_c target,
			boolean loadComponent) {
		return getOneS_DIMOnR4017(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Dimensions_c getOneS_DIMOnR4017(PropertyParameter_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_DIMOnR4017(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Dimensions_c getOneS_DIMOnR4017(ModelRoot modelRoot,
			PropertyParameter_c target, ClassQueryInterface_c test) {
		return getOneS_DIMOnR4017(modelRoot, target, test, true);
	}

	public static Dimensions_c getOneS_DIMOnR4017(ModelRoot modelRoot,
			PropertyParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneS_DIMOnR4017(modelRoot, target, test);
	}
	private static Dimensions_c find_getOneS_DIMOnR4017(ModelRoot modelRoot,
			PropertyParameter_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MayHaveDimensionsMayHave_R4017) {
				for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R4017
						.size(); ++i) {
					Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R4017
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Dimensions_c[] getManyS_DIMsOnR4017(
			PropertyParameter_c[] targets) {
		return getManyS_DIMsOnR4017(targets, null);
	}
	public static Dimensions_c[] getManyS_DIMsOnR4017(
			PropertyParameter_c[] targets, boolean loadComponent) {
		return getManyS_DIMsOnR4017(targets, null, loadComponent);
	}
	public static Dimensions_c[] getManyS_DIMsOnR4017(
			PropertyParameter_c[] targets, ClassQueryInterface_c test) {
		return getManyS_DIMsOnR4017(targets, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR4017(
			PropertyParameter_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MayHaveDimensionsMayHave_R4017) {
				for (int j = 0; j < targets[i].backPointer_MayHaveDimensionsMayHave_R4017
						.size(); ++j) {
					Dimensions_c source = (Dimensions_c) targets[i].backPointer_MayHaveDimensionsMayHave_R4017
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	public static Dimensions_c[] getManyS_DIMsOnR4017(PropertyParameter_c target) {
		return getManyS_DIMsOnR4017(target, null);
	}

	public static Dimensions_c[] getManyS_DIMsOnR4017(
			PropertyParameter_c target, boolean loadComponent) {
		return getManyS_DIMsOnR4017(target, null, loadComponent);
	}

	public static Dimensions_c[] getManyS_DIMsOnR4017(
			PropertyParameter_c target, ClassQueryInterface_c test) {
		return getManyS_DIMsOnR4017(target, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR4017(
			PropertyParameter_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MayHaveDimensionsMayHave_R4017) {
			for (int i = 0; i < target.backPointer_MayHaveDimensionsMayHave_R4017
					.size(); ++i) {
				Dimensions_c source = (Dimensions_c) target.backPointer_MayHaveDimensionsMayHave_R4017
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	// referring navigation

	InterfaceOperation_c DefinesReturnValueDimensionsForInterfaceOperation;
	public void relateAcrossR4018To(InterfaceOperation_c target) {
		relateAcrossR4018To(target, true);
	}
	public void relateAcrossR4018To(InterfaceOperation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == DefinesReturnValueDimensionsForInterfaceOperation)
			return; // already related

		if (DefinesReturnValueDimensionsForInterfaceOperation != target) {

			Object oldKey = getInstanceKey();

			if (DefinesReturnValueDimensionsForInterfaceOperation != null) {

				DefinesReturnValueDimensionsForInterfaceOperation
						.clearBackPointerR4018To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Dimensions_c.relateAcrossR4018To(InterfaceOperation_c target)",
									"Relate performed across R4018 from Dimensions to Interface Operation without unrelate of prior instance.");
				}
			}

			DefinesReturnValueDimensionsForInterfaceOperation = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_id = target.getIdCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR4018To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "4018", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR4018From(InterfaceOperation_c target) {
		unrelateAcrossR4018From(target, true);
	}
	public void unrelateAcrossR4018From(InterfaceOperation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (DefinesReturnValueDimensionsForInterfaceOperation == null)
			return; // already unrelated

		if (target != DefinesReturnValueDimensionsForInterfaceOperation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R4018",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR4018To(this);
		}

		if (DefinesReturnValueDimensionsForInterfaceOperation != null) {

			m_id = DefinesReturnValueDimensionsForInterfaceOperation.getId();
			if (IdAssigner.NULL_UUID.equals(m_id)) {
				m_id = DefinesReturnValueDimensionsForInterfaceOperation
						.getIdCachedValue();
			}
			DefinesReturnValueDimensionsForInterfaceOperation = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "4018", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Dimensions_c getOneS_DIMOnR4018(InterfaceOperation_c[] targets) {
		return getOneS_DIMOnR4018(targets, null);
	}

	public static Dimensions_c getOneS_DIMOnR4018(
			InterfaceOperation_c[] targets, ClassQueryInterface_c test) {
		Dimensions_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_DIMOnR4018(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Dimensions_c getOneS_DIMOnR4018(InterfaceOperation_c target) {
		return getOneS_DIMOnR4018(target, null);
	}

	public static Dimensions_c getOneS_DIMOnR4018(InterfaceOperation_c target,
			boolean loadComponent) {
		return getOneS_DIMOnR4018(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Dimensions_c getOneS_DIMOnR4018(InterfaceOperation_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_DIMOnR4018(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Dimensions_c getOneS_DIMOnR4018(ModelRoot modelRoot,
			InterfaceOperation_c target, ClassQueryInterface_c test) {
		return getOneS_DIMOnR4018(modelRoot, target, test, true);
	}

	public static Dimensions_c getOneS_DIMOnR4018(ModelRoot modelRoot,
			InterfaceOperation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneS_DIMOnR4018(modelRoot, target, test);
	}
	private static Dimensions_c find_getOneS_DIMOnR4018(ModelRoot modelRoot,
			InterfaceOperation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R4018) {
				for (int i = 0; i < target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R4018
						.size(); ++i) {
					Dimensions_c source = (Dimensions_c) target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R4018
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Dimensions_c[] getManyS_DIMsOnR4018(
			InterfaceOperation_c[] targets) {
		return getManyS_DIMsOnR4018(targets, null);
	}
	public static Dimensions_c[] getManyS_DIMsOnR4018(
			InterfaceOperation_c[] targets, boolean loadComponent) {
		return getManyS_DIMsOnR4018(targets, null, loadComponent);
	}
	public static Dimensions_c[] getManyS_DIMsOnR4018(
			InterfaceOperation_c[] targets, ClassQueryInterface_c test) {
		return getManyS_DIMsOnR4018(targets, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR4018(
			InterfaceOperation_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R4018) {
				for (int j = 0; j < targets[i].backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R4018
						.size(); ++j) {
					Dimensions_c source = (Dimensions_c) targets[i].backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R4018
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	public static Dimensions_c[] getManyS_DIMsOnR4018(
			InterfaceOperation_c target) {
		return getManyS_DIMsOnR4018(target, null);
	}

	public static Dimensions_c[] getManyS_DIMsOnR4018(
			InterfaceOperation_c target, boolean loadComponent) {
		return getManyS_DIMsOnR4018(target, null, loadComponent);
	}

	public static Dimensions_c[] getManyS_DIMsOnR4018(
			InterfaceOperation_c target, ClassQueryInterface_c test) {
		return getManyS_DIMsOnR4018(target, test, true);
	}

	public static Dimensions_c[] getManyS_DIMsOnR4018(
			InterfaceOperation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new Dimensions_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R4018) {
			for (int i = 0; i < target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R4018
					.size(); ++i) {
				Dimensions_c source = (Dimensions_c) target.backPointer_ReturnValueMayHaveDimensionsReturnValueMayHave_R4018
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Dimensions_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (SpecifiesOccurrencesOfStructureMember == null) {
			// R53
			StructureMember_c relInst55060 = (StructureMember_c) baseRoot
					.getInstanceList(StructureMember_c.class).get(
							new Object[]{m_member_id, m_dt_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst55060 == null) {
				relInst55060 = (StructureMember_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(StructureMember_c.class)
						.get(new Object[]{m_member_id, m_dt_id});
			}
			if (relInst55060 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst55060 = (StructureMember_c) roots[i]
							.getInstanceList(StructureMember_c.class).get(
									new Object[]{m_member_id, m_dt_id});
					if (relInst55060 != null)
						break;
				}
			}
			//synchronized
			if (relInst55060 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst55060) && !isProxy())) {
					relInst55060.relateAcrossR53To(this, notifyChanges);
				}
			}
		}

		if (SpecifiesOccurrencesOfFunctionParameter == null) {
			// R52
			FunctionParameter_c relInst55061 = (FunctionParameter_c) baseRoot
					.getInstanceList(FunctionParameter_c.class).get(
							new Object[]{m_sparm_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst55061 == null) {
				relInst55061 = (FunctionParameter_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(FunctionParameter_c.class)
						.get(new Object[]{m_sparm_id});
			}
			if (relInst55061 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst55061 = (FunctionParameter_c) roots[i]
							.getInstanceList(FunctionParameter_c.class).get(
									new Object[]{m_sparm_id});
					if (relInst55061 != null)
						break;
				}
			}
			//synchronized
			if (relInst55061 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst55061) && !isProxy())) {
					relInst55061.relateAcrossR52To(this, notifyChanges);
				}
			}
		}

		if (DefinesReturnValueDimensionsForFunction == null) {
			// R51
			Function_c relInst55062 = (Function_c) baseRoot.getInstanceList(
					Function_c.class).get(new Object[]{m_sync_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst55062 == null) {
				relInst55062 = (Function_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Function_c.class)
						.get(new Object[]{m_sync_id});
			}
			if (relInst55062 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst55062 = (Function_c) roots[i].getInstanceList(
							Function_c.class).get(new Object[]{m_sync_id});
					if (relInst55062 != null)
						break;
				}
			}
			//synchronized
			if (relInst55062 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst55062) && !isProxy())) {
					relInst55062.relateAcrossR51To(this, notifyChanges);
				}
			}
		}

		if (SpecifiesOccurrencesOfTransientVar == null) {
			// R844
			TransientVar_c relInst55063 = (TransientVar_c) baseRoot
					.getInstanceList(TransientVar_c.class).get(
							new Object[]{m_var_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst55063 == null) {
				relInst55063 = (TransientVar_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(TransientVar_c.class)
						.get(new Object[]{m_var_id});
			}
			if (relInst55063 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst55063 = (TransientVar_c) roots[i].getInstanceList(
							TransientVar_c.class).get(new Object[]{m_var_id});
					if (relInst55063 != null)
						break;
				}
			}
			//synchronized
			if (relInst55063 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst55063) && !isProxy())) {
					relInst55063.relateAcrossR844To(this, notifyChanges);
				}
			}
		}

		if (SpecifiesOccurrencesOfVariable == null) {
			// R849
			Variable_c relInst55064 = (Variable_c) baseRoot.getInstanceList(
					Variable_c.class).get(new Object[]{m_var_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst55064 == null) {
				relInst55064 = (Variable_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Variable_c.class)
						.get(new Object[]{m_var_id});
			}
			if (relInst55064 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst55064 = (Variable_c) roots[i].getInstanceList(
							Variable_c.class).get(new Object[]{m_var_id});
					if (relInst55064 != null)
						break;
				}
			}
			//synchronized
			if (relInst55064 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst55064) && !isProxy())) {
					relInst55064.relateAcrossR849To(this, notifyChanges);
				}
			}
		}

		if (SpecifiesOccurrencesOfAttribute == null) {
			// R120
			Attribute_c relInst55065 = (Attribute_c) baseRoot.getInstanceList(
					Attribute_c.class).get(new Object[]{m_attr_id, m_obj_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst55065 == null) {
				relInst55065 = (Attribute_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Attribute_c.class)
						.get(new Object[]{m_attr_id, m_obj_id});
			}
			if (relInst55065 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst55065 = (Attribute_c) roots[i].getInstanceList(
							Attribute_c.class).get(
							new Object[]{m_attr_id, m_obj_id});
					if (relInst55065 != null)
						break;
				}
			}
			//synchronized
			if (relInst55065 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst55065) && !isProxy())) {
					relInst55065.relateAcrossR120To(this, notifyChanges);
				}
			}
		}

		if (SpecifiesOccurrencesOfOperationParameter == null) {
			// R121
			OperationParameter_c relInst55066 = (OperationParameter_c) baseRoot
					.getInstanceList(OperationParameter_c.class).get(
							new Object[]{m_tparm_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst55066 == null) {
				relInst55066 = (OperationParameter_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(OperationParameter_c.class)
						.get(new Object[]{m_tparm_id});
			}
			if (relInst55066 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst55066 = (OperationParameter_c) roots[i]
							.getInstanceList(OperationParameter_c.class).get(
									new Object[]{m_tparm_id});
					if (relInst55066 != null)
						break;
				}
			}
			//synchronized
			if (relInst55066 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst55066) && !isProxy())) {
					relInst55066.relateAcrossR121To(this, notifyChanges);
				}
			}
		}

		if (DefinesReturnValueDimensionsForOperation == null) {
			// R122
			Operation_c relInst55067 = (Operation_c) baseRoot.getInstanceList(
					Operation_c.class).get(new Object[]{m_tfr_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst55067 == null) {
				relInst55067 = (Operation_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Operation_c.class)
						.get(new Object[]{m_tfr_id});
			}
			if (relInst55067 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst55067 = (Operation_c) roots[i].getInstanceList(
							Operation_c.class).get(new Object[]{m_tfr_id});
					if (relInst55067 != null)
						break;
				}
			}
			//synchronized
			if (relInst55067 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst55067) && !isProxy())) {
					relInst55067.relateAcrossR122To(this, notifyChanges);
				}
			}
		}

		if (SpecifiesOccurrencesOfStateMachineEventDataItem == null) {
			// R531
			StateMachineEventDataItem_c relInst55068 = (StateMachineEventDataItem_c) baseRoot
					.getInstanceList(StateMachineEventDataItem_c.class).get(
							new Object[]{m_sm_id, m_smedi_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst55068 == null) {
				relInst55068 = (StateMachineEventDataItem_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(StateMachineEventDataItem_c.class)
						.get(new Object[]{m_sm_id, m_smedi_id});
			}
			if (relInst55068 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst55068 = (StateMachineEventDataItem_c) roots[i]
							.getInstanceList(StateMachineEventDataItem_c.class)
							.get(new Object[]{m_sm_id, m_smedi_id});
					if (relInst55068 != null)
						break;
				}
			}
			//synchronized
			if (relInst55068 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst55068) && !isProxy())) {
					relInst55068.relateAcrossR531To(this, notifyChanges);
				}
			}
		}

		if (SpecifiesOccurrencesOfBridgeParameter == null) {
			// R49
			BridgeParameter_c relInst55069 = (BridgeParameter_c) baseRoot
					.getInstanceList(BridgeParameter_c.class).get(
							new Object[]{m_bparm_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst55069 == null) {
				relInst55069 = (BridgeParameter_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(BridgeParameter_c.class)
						.get(new Object[]{m_bparm_id});
			}
			if (relInst55069 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst55069 = (BridgeParameter_c) roots[i]
							.getInstanceList(BridgeParameter_c.class).get(
									new Object[]{m_bparm_id});
					if (relInst55069 != null)
						break;
				}
			}
			//synchronized
			if (relInst55069 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst55069) && !isProxy())) {
					relInst55069.relateAcrossR49To(this, notifyChanges);
				}
			}
		}

		if (DefinesReturnValueDimensionsForBridge == null) {
			// R50
			Bridge_c relInst55070 = (Bridge_c) baseRoot.getInstanceList(
					Bridge_c.class).get(new Object[]{m_brg_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst55070 == null) {
				relInst55070 = (Bridge_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Bridge_c.class)
						.get(new Object[]{m_brg_id});
			}
			if (relInst55070 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst55070 = (Bridge_c) roots[i].getInstanceList(
							Bridge_c.class).get(new Object[]{m_brg_id});
					if (relInst55070 != null)
						break;
				}
			}
			//synchronized
			if (relInst55070 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst55070) && !isProxy())) {
					relInst55070.relateAcrossR50To(this, notifyChanges);
				}
			}
		}

		if (SpecifiesOccurrencesOfPropertyParameter == null) {
			// R4017
			PropertyParameter_c relInst55071 = (PropertyParameter_c) baseRoot
					.getInstanceList(PropertyParameter_c.class).get(
							new Object[]{m_pp_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst55071 == null) {
				relInst55071 = (PropertyParameter_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(PropertyParameter_c.class)
						.get(new Object[]{m_pp_id});
			}
			if (relInst55071 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst55071 = (PropertyParameter_c) roots[i]
							.getInstanceList(PropertyParameter_c.class).get(
									new Object[]{m_pp_id});
					if (relInst55071 != null)
						break;
				}
			}
			//synchronized
			if (relInst55071 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst55071) && !isProxy())) {
					relInst55071.relateAcrossR4017To(this, notifyChanges);
				}
			}
		}

		if (DefinesReturnValueDimensionsForInterfaceOperation == null) {
			// R4018
			InterfaceOperation_c relInst55072 = (InterfaceOperation_c) baseRoot
					.getInstanceList(InterfaceOperation_c.class).get(
							new Object[]{m_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst55072 == null) {
				relInst55072 = (InterfaceOperation_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(InterfaceOperation_c.class)
						.get(new Object[]{m_id});
			}
			if (relInst55072 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst55072 = (InterfaceOperation_c) roots[i]
							.getInstanceList(InterfaceOperation_c.class).get(
									new Object[]{m_id});
					if (relInst55072 != null)
						break;
				}
			}
			//synchronized
			if (relInst55072 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst55072) && !isProxy())) {
					relInst55072.relateAcrossR4018To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R53
		// S_MBR
		inst = SpecifiesOccurrencesOfStructureMember;
		unrelateAcrossR53From(SpecifiesOccurrencesOfStructureMember,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R52
		// S_SPARM
		inst = SpecifiesOccurrencesOfFunctionParameter;
		unrelateAcrossR52From(SpecifiesOccurrencesOfFunctionParameter,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R51
		// S_SYNC
		inst = DefinesReturnValueDimensionsForFunction;
		unrelateAcrossR51From(DefinesReturnValueDimensionsForFunction,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R844
		// V_TRN
		inst = SpecifiesOccurrencesOfTransientVar;
		unrelateAcrossR844From(SpecifiesOccurrencesOfTransientVar,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R849
		// V_VAR
		inst = SpecifiesOccurrencesOfVariable;
		unrelateAcrossR849From(SpecifiesOccurrencesOfVariable, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R120
		// O_ATTR
		inst = SpecifiesOccurrencesOfAttribute;
		unrelateAcrossR120From(SpecifiesOccurrencesOfAttribute, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R121
		// O_TPARM
		inst = SpecifiesOccurrencesOfOperationParameter;
		unrelateAcrossR121From(SpecifiesOccurrencesOfOperationParameter,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R122
		// O_TFR
		inst = DefinesReturnValueDimensionsForOperation;
		unrelateAcrossR122From(DefinesReturnValueDimensionsForOperation,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R531
		// SM_EVTDI
		inst = SpecifiesOccurrencesOfStateMachineEventDataItem;
		unrelateAcrossR531From(SpecifiesOccurrencesOfStateMachineEventDataItem,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R49
		// S_BPARM
		inst = SpecifiesOccurrencesOfBridgeParameter;
		unrelateAcrossR49From(SpecifiesOccurrencesOfBridgeParameter,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R50
		// S_BRG
		inst = DefinesReturnValueDimensionsForBridge;
		unrelateAcrossR50From(DefinesReturnValueDimensionsForBridge,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R4017
		// C_PP
		inst = SpecifiesOccurrencesOfPropertyParameter;
		unrelateAcrossR4017From(SpecifiesOccurrencesOfPropertyParameter,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R4018
		// C_IO
		inst = DefinesReturnValueDimensionsForInterfaceOperation;
		unrelateAcrossR4018From(
				DefinesReturnValueDimensionsForInterfaceOperation,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Dimensions_c inst = (Dimensions_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Dimensions_c DimensionsInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Dimensions_c result = findDimensionsInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					Dimensions_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findDimensionsInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static Dimensions_c findDimensionsInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Dimensions_c x = (Dimensions_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static Dimensions_c DimensionsInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return DimensionsInstance(modelRoot, test, true);
	}

	public static Dimensions_c DimensionsInstance(ModelRoot modelRoot) {
		return DimensionsInstance(modelRoot, null, true);
	}

	public static Dimensions_c[] DimensionsInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					Dimensions_c.class);
		}
		InstanceList instances = modelRoot.getInstanceList(Dimensions_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Dimensions_c x = (Dimensions_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Dimensions_c[] ret_set = new Dimensions_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Dimensions_c[0];
			}
		}
	}
	public static Dimensions_c[] DimensionsInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return DimensionsInstances(modelRoot, test, true);
	}
	public static Dimensions_c[] DimensionsInstances(ModelRoot modelRoot) {
		return DimensionsInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Dimensions.dispose call: ";
		StructureMember_c testR53Inst = StructureMember_c.getOneS_MBROnR53(
				this, false);

		if (testR53Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "53 ";
		}
		FunctionParameter_c testR52Inst = FunctionParameter_c
				.getOneS_SPARMOnR52(this, false);

		if (testR52Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "52 ";
		}
		Function_c testR51Inst = Function_c.getOneS_SYNCOnR51(this, false);

		if (testR51Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "51 ";
		}
		TransientVar_c testR844Inst = TransientVar_c.getOneV_TRNOnR844(this,
				false);

		if (testR844Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "844 ";
		}
		Variable_c testR849Inst = Variable_c.getOneV_VAROnR849(this, false);

		if (testR849Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "849 ";
		}
		Attribute_c testR120Inst = Attribute_c.getOneO_ATTROnR120(this, false);

		if (testR120Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "120 ";
		}
		OperationParameter_c testR121Inst = OperationParameter_c
				.getOneO_TPARMOnR121(this, false);

		if (testR121Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "121 ";
		}
		Operation_c testR122Inst = Operation_c.getOneO_TFROnR122(this, false);

		if (testR122Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "122 ";
		}
		StateMachineEventDataItem_c testR531Inst = StateMachineEventDataItem_c
				.getOneSM_EVTDIOnR531(this, false);

		if (testR531Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "531 ";
		}
		BridgeParameter_c testR49Inst = BridgeParameter_c.getOneS_BPARMOnR49(
				this, false);

		if (testR49Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "49 ";
		}
		Bridge_c testR50Inst = Bridge_c.getOneS_BRGOnR50(this, false);

		if (testR50Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "50 ";
		}
		PropertyParameter_c testR4017Inst = PropertyParameter_c
				.getOneC_PPOnR4017(this, false);

		if (testR4017Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "4017 ";
		}
		InterfaceOperation_c testR4018Inst = InterfaceOperation_c
				.getOneC_IOOnR4018(this, false);

		if (testR4018Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "4018 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Dimensions", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("sparm_id")) {
			return true;
		}
		if (attributeName.equals("bparm_id")) {
			return true;
		}
		if (attributeName.equals("brg_id")) {
			return true;
		}
		if (attributeName.equals("id")) {
			return true;
		}
		if (attributeName.equals("attr_id")) {
			return true;
		}
		if (attributeName.equals("tparm_id")) {
			return true;
		}
		if (attributeName.equals("tfr_id")) {
			return true;
		}
		if (attributeName.equals("member_id")) {
			return true;
		}
		if (attributeName.equals("pp_id")) {
			return true;
		}
		if (attributeName.equals("sm_id")) {
			return true;
		}
		if (attributeName.equals("smedi_id")) {
			return true;
		}
		if (attributeName.equals("dim_id")) {
			return true;
		}
		if (attributeName.equals("var_id")) {
			return true;
		}
		if (attributeName.equals("dt_id")) {
			return true;
		}
		if (attributeName.equals("obj_id")) {
			return true;
		}
		if (attributeName.equals("sync_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getDim_id();

		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public int getElementcount() {
		return m_elementcount;
	}

	public void setElementcount(int newValue) {
		if (m_elementcount == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Elementcount", new Integer(m_elementcount), new Integer(
						newValue), true);

		m_elementcount = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSparm_idLongBased() {
		if (SpecifiesOccurrencesOfFunctionParameter != null) {
			return SpecifiesOccurrencesOfFunctionParameter
					.getSparm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSparm_id() {
		if (SpecifiesOccurrencesOfFunctionParameter != null) {
			return SpecifiesOccurrencesOfFunctionParameter.getSparm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSparm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sparm_id))
			return m_sparm_id;
		else
			return getSparm_id();
	}

	public void setSparm_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_sparm_id)) {
				return;
			}
		} else if (m_sparm_id != null) {
			if (m_sparm_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Sparm_id", m_sparm_id, newValue, true);
		m_sparm_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getBparm_idLongBased() {
		if (SpecifiesOccurrencesOfBridgeParameter != null) {
			return SpecifiesOccurrencesOfBridgeParameter.getBparm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getBparm_id() {
		if (SpecifiesOccurrencesOfBridgeParameter != null) {
			return SpecifiesOccurrencesOfBridgeParameter.getBparm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getBparm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_bparm_id))
			return m_bparm_id;
		else
			return getBparm_id();
	}

	public void setBparm_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_bparm_id)) {
				return;
			}
		} else if (m_bparm_id != null) {
			if (m_bparm_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Bparm_id", m_bparm_id, newValue, true);
		m_bparm_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getBrg_idLongBased() {
		if (DefinesReturnValueDimensionsForBridge != null) {
			return DefinesReturnValueDimensionsForBridge.getBrg_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getBrg_id() {
		if (DefinesReturnValueDimensionsForBridge != null) {
			return DefinesReturnValueDimensionsForBridge.getBrg_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getBrg_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_brg_id))
			return m_brg_id;
		else
			return getBrg_id();
	}

	public void setBrg_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_brg_id)) {
				return;
			}
		} else if (m_brg_id != null) {
			if (m_brg_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Brg_id", m_brg_id, newValue, true);
		m_brg_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getIdLongBased() {
		if (DefinesReturnValueDimensionsForInterfaceOperation != null) {
			return DefinesReturnValueDimensionsForInterfaceOperation
					.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getId() {
		if (DefinesReturnValueDimensionsForInterfaceOperation != null) {
			return DefinesReturnValueDimensionsForInterfaceOperation.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getIdCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_id))
			return m_id;
		else
			return getId();
	}

	public void setId(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_id)) {
				return;
			}
		} else if (m_id != null) {
			if (m_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Id",
				m_id, newValue, true);
		m_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getAttr_idLongBased() {
		if (SpecifiesOccurrencesOfAttribute != null) {
			return SpecifiesOccurrencesOfAttribute.getAttr_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getAttr_id() {
		if (SpecifiesOccurrencesOfAttribute != null) {
			return SpecifiesOccurrencesOfAttribute.getAttr_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getAttr_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_attr_id))
			return m_attr_id;
		else
			return getAttr_id();
	}

	public void setAttr_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_attr_id)) {
				return;
			}
		} else if (m_attr_id != null) {
			if (m_attr_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Attr_id", m_attr_id, newValue, true);
		m_attr_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getTparm_idLongBased() {
		if (SpecifiesOccurrencesOfOperationParameter != null) {
			return SpecifiesOccurrencesOfOperationParameter
					.getTparm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getTparm_id() {
		if (SpecifiesOccurrencesOfOperationParameter != null) {
			return SpecifiesOccurrencesOfOperationParameter.getTparm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getTparm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_tparm_id))
			return m_tparm_id;
		else
			return getTparm_id();
	}

	public void setTparm_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_tparm_id)) {
				return;
			}
		} else if (m_tparm_id != null) {
			if (m_tparm_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Tparm_id", m_tparm_id, newValue, true);
		m_tparm_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getTfr_idLongBased() {
		if (DefinesReturnValueDimensionsForOperation != null) {
			return DefinesReturnValueDimensionsForOperation
					.getTfr_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getTfr_id() {
		if (DefinesReturnValueDimensionsForOperation != null) {
			return DefinesReturnValueDimensionsForOperation.getTfr_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getTfr_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_tfr_id))
			return m_tfr_id;
		else
			return getTfr_id();
	}

	public void setTfr_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_tfr_id)) {
				return;
			}
		} else if (m_tfr_id != null) {
			if (m_tfr_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Tfr_id", m_tfr_id, newValue, true);
		m_tfr_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getMember_idLongBased() {
		if (SpecifiesOccurrencesOfStructureMember != null) {
			return SpecifiesOccurrencesOfStructureMember
					.getMember_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getMember_id() {
		if (SpecifiesOccurrencesOfStructureMember != null) {
			return SpecifiesOccurrencesOfStructureMember.getMember_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getMember_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_member_id))
			return m_member_id;
		else
			return getMember_id();
	}

	public void setMember_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_member_id)) {
				return;
			}
		} else if (m_member_id != null) {
			if (m_member_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Member_id", m_member_id, newValue, true);
		m_member_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getPp_idLongBased() {
		if (SpecifiesOccurrencesOfPropertyParameter != null) {
			return SpecifiesOccurrencesOfPropertyParameter.getPp_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getPp_id() {
		if (SpecifiesOccurrencesOfPropertyParameter != null) {
			return SpecifiesOccurrencesOfPropertyParameter.getPp_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getPp_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_pp_id))
			return m_pp_id;
		else
			return getPp_id();
	}

	public void setPp_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_pp_id)) {
				return;
			}
		} else if (m_pp_id != null) {
			if (m_pp_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Pp_id",
				m_pp_id, newValue, true);
		m_pp_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSm_idLongBased() {
		if (SpecifiesOccurrencesOfStateMachineEventDataItem != null) {
			return SpecifiesOccurrencesOfStateMachineEventDataItem
					.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSm_id() {
		if (SpecifiesOccurrencesOfStateMachineEventDataItem != null) {
			return SpecifiesOccurrencesOfStateMachineEventDataItem.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sm_id))
			return m_sm_id;
		else
			return getSm_id();
	}

	public void setSm_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_sm_id)) {
				return;
			}
		} else if (m_sm_id != null) {
			if (m_sm_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sm_id",
				m_sm_id, newValue, true);
		m_sm_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSmedi_idLongBased() {
		if (SpecifiesOccurrencesOfStateMachineEventDataItem != null) {
			return SpecifiesOccurrencesOfStateMachineEventDataItem
					.getSmedi_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmedi_id() {
		if (SpecifiesOccurrencesOfStateMachineEventDataItem != null) {
			return SpecifiesOccurrencesOfStateMachineEventDataItem
					.getSmedi_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmedi_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smedi_id))
			return m_smedi_id;
		else
			return getSmedi_id();
	}

	public void setSmedi_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smedi_id)) {
				return;
			}
		} else if (m_smedi_id != null) {
			if (m_smedi_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smedi_id", m_smedi_id, newValue, true);
		m_smedi_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public int getDimensioncount() {
		return m_dimensioncount;
	}

	public void setDimensioncount(int newValue) {
		if (m_dimensioncount == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Dimensioncount", new Integer(m_dimensioncount), new Integer(
						newValue), true);

		m_dimensioncount = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getDim_idLongBased() {
		if (m_dim_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_dim_id)) {
			return 0xfffffff & m_dim_id.getLeastSignificantBits();
		}
		return m_dim_idLongBased;
	}
	public java.util.UUID getDim_id() {
		return m_dim_id;
	}

	public void setDim_id(java.util.UUID newValue) {
		m_dim_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getVar_idLongBased() {
		if (SpecifiesOccurrencesOfVariable != null) {
			return SpecifiesOccurrencesOfVariable.getVar_idLongBased();
		}
		if (SpecifiesOccurrencesOfTransientVar != null) {
			return SpecifiesOccurrencesOfTransientVar.getVar_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getVar_id() {
		if (SpecifiesOccurrencesOfVariable != null) {
			return SpecifiesOccurrencesOfVariable.getVar_id();
		}
		if (SpecifiesOccurrencesOfTransientVar != null) {
			return SpecifiesOccurrencesOfTransientVar.getVar_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getVar_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_var_id))
			return m_var_id;
		else
			return getVar_id();
	}

	public long getDt_idLongBased() {
		if (SpecifiesOccurrencesOfStructureMember != null) {
			return SpecifiesOccurrencesOfStructureMember
					.getParent_dt_dt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getDt_id() {
		if (SpecifiesOccurrencesOfStructureMember != null) {
			return SpecifiesOccurrencesOfStructureMember.getParent_dt_dt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getDt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_dt_id))
			return m_dt_id;
		else
			return getDt_id();
	}

	public void setDt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_dt_id)) {
				return;
			}
		} else if (m_dt_id != null) {
			if (m_dt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Dt_id",
				m_dt_id, newValue, true);
		m_dt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getObj_idLongBased() {
		if (SpecifiesOccurrencesOfAttribute != null) {
			return SpecifiesOccurrencesOfAttribute.getObj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getObj_id() {
		if (SpecifiesOccurrencesOfAttribute != null) {
			return SpecifiesOccurrencesOfAttribute.getObj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getObj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_obj_id))
			return m_obj_id;
		else
			return getObj_id();
	}

	public void setObj_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_obj_id)) {
				return;
			}
		} else if (m_obj_id != null) {
			if (m_obj_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Obj_id", m_obj_id, newValue, true);
		m_obj_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSync_idLongBased() {
		if (DefinesReturnValueDimensionsForFunction != null) {
			return DefinesReturnValueDimensionsForFunction
					.getSync_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSync_id() {
		if (DefinesReturnValueDimensionsForFunction != null) {
			return DefinesReturnValueDimensionsForFunction.getSync_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSync_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sync_id))
			return m_sync_id;
		else
			return getSync_id();
	}

	public void setSync_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_sync_id)) {
				return;
			}
		} else if (m_sync_id != null) {
			if (m_sync_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Sync_id", m_sync_id, newValue, true);
		m_sync_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Dimensions", //$NON-NLS-1$
				" Operation entered: Dimensions::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Dimensions_c[] objs = Dimensions_c.DimensionsInstances(modelRoot, null,
				false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Dimensions", //$NON-NLS-1$
				" Operation entered: Dimensions::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Dimensions_c_test55074_c implements ClassQueryInterface_c {
			Dimensions_c_test55074_c(java.util.UUID p55075) {
				m_p55075 = p55075;
			}
			private java.util.UUID m_p55075;
			public boolean evaluate(Object candidate) {
				Dimensions_c selected = (Dimensions_c) candidate;
				boolean retval = false;
				retval = (selected.getDim_id().equals(m_p55075));
				return retval;
			}
		}

		Dimensions_c[] objs55073 = Dimensions_c.DimensionsInstances(modelRoot,
				new Dimensions_c_test55074_c(getDim_id()));

		if (((objs55073.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Dimensions", //$NON-NLS-1$
								"Consistency: Object: Dimensions: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs55073.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Dimensions: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs55073.length), e);
			}
			retval = false;

		}

		if (((objs55073.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Dimensions", //$NON-NLS-1$
								"Consistency: Object: Dimensions: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs55073.length)
										+ " DIM_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Dimensions: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs55073.length)
										+ " DIM_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Dimensions is a referring class in association: rel.Numb = 52
		// The participating class is: Function Parameter
		class FunctionParameter_c_test55079_c implements ClassQueryInterface_c {
			FunctionParameter_c_test55079_c(java.util.UUID p55080) {
				m_p55080 = p55080;
			}
			private java.util.UUID m_p55080;
			public boolean evaluate(Object candidate) {
				FunctionParameter_c selected = (FunctionParameter_c) candidate;
				boolean retval = false;
				retval = (selected.getSparm_id().equals(m_p55080));
				return retval;
			}
		}

		FunctionParameter_c[] objs55078 = FunctionParameter_c
				.FunctionParameterInstances(modelRoot,
						new FunctionParameter_c_test55079_c(getSparm_id()));

		if (((objs55078.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Dimensions", //$NON-NLS-1$
								"Consistency: Object: Dimensions: Association: 52: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs55078.length)
										+ " SParm_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Dimensions: Association: 52: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs55078.length)
										+ " SParm_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Dimensions is a referring class in association: rel.Numb = 49
		// The participating class is: Bridge Parameter
		class BridgeParameter_c_test55082_c implements ClassQueryInterface_c {
			BridgeParameter_c_test55082_c(java.util.UUID p55083) {
				m_p55083 = p55083;
			}
			private java.util.UUID m_p55083;
			public boolean evaluate(Object candidate) {
				BridgeParameter_c selected = (BridgeParameter_c) candidate;
				boolean retval = false;
				retval = (selected.getBparm_id().equals(m_p55083));
				return retval;
			}
		}

		BridgeParameter_c[] objs55081 = BridgeParameter_c
				.BridgeParameterInstances(modelRoot,
						new BridgeParameter_c_test55082_c(getBparm_id()));

		if (((objs55081.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Dimensions", //$NON-NLS-1$
								"Consistency: Object: Dimensions: Association: 49: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs55081.length)
										+ " BParm_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Dimensions: Association: 49: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs55081.length)
										+ " BParm_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Dimensions is a referring class in association: rel.Numb = 50
		// The participating class is: Bridge
		class Bridge_c_test55085_c implements ClassQueryInterface_c {
			Bridge_c_test55085_c(java.util.UUID p55086) {
				m_p55086 = p55086;
			}
			private java.util.UUID m_p55086;
			public boolean evaluate(Object candidate) {
				Bridge_c selected = (Bridge_c) candidate;
				boolean retval = false;
				retval = (selected.getBrg_id().equals(m_p55086));
				return retval;
			}
		}

		Bridge_c[] objs55084 = Bridge_c.BridgeInstances(modelRoot,
				new Bridge_c_test55085_c(getBrg_id()));

		if (((objs55084.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Dimensions", //$NON-NLS-1$
								"Consistency: Object: Dimensions: Association: 50: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs55084.length)
										+ " Brg_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Dimensions: Association: 50: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs55084.length)
										+ " Brg_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Dimensions is a referring class in association: rel.Numb = 4018
		// The participating class is: Interface Operation
		class InterfaceOperation_c_test55088_c implements ClassQueryInterface_c {
			InterfaceOperation_c_test55088_c(java.util.UUID p55089) {
				m_p55089 = p55089;
			}
			private java.util.UUID m_p55089;
			public boolean evaluate(Object candidate) {
				InterfaceOperation_c selected = (InterfaceOperation_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p55089));
				return retval;
			}
		}

		InterfaceOperation_c[] objs55087 = InterfaceOperation_c
				.InterfaceOperationInstances(modelRoot,
						new InterfaceOperation_c_test55088_c(getId()));

		if (((objs55087.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Dimensions", //$NON-NLS-1$
								"Consistency: Object: Dimensions: Association: 4018: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs55087.length)
										+ " Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Dimensions: Association: 4018: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs55087.length)
										+ " Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Dimensions is a referring class in association: rel.Numb = 120
		// The participating class is: Attribute
		class Attribute_c_test55091_c implements ClassQueryInterface_c {
			Attribute_c_test55091_c(java.util.UUID p55092, java.util.UUID p55093) {
				m_p55092 = p55092;
				m_p55093 = p55093;
			}
			private java.util.UUID m_p55092;
			private java.util.UUID m_p55093;
			public boolean evaluate(Object candidate) {
				Attribute_c selected = (Attribute_c) candidate;
				boolean retval = false;
				retval = (selected.getAttr_id().equals(m_p55092))
						& (selected.getObj_id().equals(m_p55093));
				return retval;
			}
		}

		Attribute_c[] objs55090 = Attribute_c.AttributeInstances(modelRoot,
				new Attribute_c_test55091_c(getAttr_id(), getObj_id()));

		if (((objs55090.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Dimensions", //$NON-NLS-1$
								"Consistency: Object: Dimensions: Association: 120: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs55090.length)
										+ " Attr_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Dimensions: Association: 120: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs55090.length)
										+ " Attr_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Dimensions is a referring class in association: rel.Numb = 121
		// The participating class is: Operation Parameter
		class OperationParameter_c_test55095_c implements ClassQueryInterface_c {
			OperationParameter_c_test55095_c(java.util.UUID p55096) {
				m_p55096 = p55096;
			}
			private java.util.UUID m_p55096;
			public boolean evaluate(Object candidate) {
				OperationParameter_c selected = (OperationParameter_c) candidate;
				boolean retval = false;
				retval = (selected.getTparm_id().equals(m_p55096));
				return retval;
			}
		}

		OperationParameter_c[] objs55094 = OperationParameter_c
				.OperationParameterInstances(modelRoot,
						new OperationParameter_c_test55095_c(getTparm_id()));

		if (((objs55094.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Dimensions", //$NON-NLS-1$
								"Consistency: Object: Dimensions: Association: 121: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs55094.length)
										+ " TParm_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Dimensions: Association: 121: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs55094.length)
										+ " TParm_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Dimensions is a referring class in association: rel.Numb = 122
		// The participating class is: Operation
		class Operation_c_test55098_c implements ClassQueryInterface_c {
			Operation_c_test55098_c(java.util.UUID p55099) {
				m_p55099 = p55099;
			}
			private java.util.UUID m_p55099;
			public boolean evaluate(Object candidate) {
				Operation_c selected = (Operation_c) candidate;
				boolean retval = false;
				retval = (selected.getTfr_id().equals(m_p55099));
				return retval;
			}
		}

		Operation_c[] objs55097 = Operation_c.OperationInstances(modelRoot,
				new Operation_c_test55098_c(getTfr_id()));

		if (((objs55097.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Dimensions", //$NON-NLS-1$
								"Consistency: Object: Dimensions: Association: 122: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs55097.length)
										+ " Tfr_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Dimensions: Association: 122: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs55097.length)
										+ " Tfr_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Dimensions is a referring class in association: rel.Numb = 53
		// The participating class is: Structure Member
		class StructureMember_c_test55101_c implements ClassQueryInterface_c {
			StructureMember_c_test55101_c(java.util.UUID p55102,
					java.util.UUID p55103) {
				m_p55102 = p55102;
				m_p55103 = p55103;
			}
			private java.util.UUID m_p55102;
			private java.util.UUID m_p55103;
			public boolean evaluate(Object candidate) {
				StructureMember_c selected = (StructureMember_c) candidate;
				boolean retval = false;
				retval = (selected.getMember_id().equals(m_p55102))
						& (selected.getParent_dt_dt_id().equals(m_p55103));
				return retval;
			}
		}

		StructureMember_c[] objs55100 = StructureMember_c
				.StructureMemberInstances(modelRoot,
						new StructureMember_c_test55101_c(getMember_id(),
								getDt_id()));

		if (((objs55100.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Dimensions", //$NON-NLS-1$
								"Consistency: Object: Dimensions: Association: 53: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs55100.length)
										+ " Member_ID: " + "Not Printable" + " DT_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Dimensions: Association: 53: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs55100.length)
										+ " Member_ID: " + "Not Printable" + " DT_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Dimensions is a referring class in association: rel.Numb = 4017
		// The participating class is: Property Parameter
		class PropertyParameter_c_test55105_c implements ClassQueryInterface_c {
			PropertyParameter_c_test55105_c(java.util.UUID p55106) {
				m_p55106 = p55106;
			}
			private java.util.UUID m_p55106;
			public boolean evaluate(Object candidate) {
				PropertyParameter_c selected = (PropertyParameter_c) candidate;
				boolean retval = false;
				retval = (selected.getPp_id().equals(m_p55106));
				return retval;
			}
		}

		PropertyParameter_c[] objs55104 = PropertyParameter_c
				.PropertyParameterInstances(modelRoot,
						new PropertyParameter_c_test55105_c(getPp_id()));

		if (((objs55104.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Dimensions", //$NON-NLS-1$
								"Consistency: Object: Dimensions: Association: 4017: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs55104.length)
										+ " PP_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Dimensions: Association: 4017: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs55104.length)
										+ " PP_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Dimensions is a referring class in association: rel.Numb = 531
		// The participating class is: State Machine Event Data Item
		class StateMachineEventDataItem_c_test55108_c
				implements
					ClassQueryInterface_c {
			StateMachineEventDataItem_c_test55108_c(java.util.UUID p55109,
					java.util.UUID p55110) {
				m_p55109 = p55109;
				m_p55110 = p55110;
			}
			private java.util.UUID m_p55109;
			private java.util.UUID m_p55110;
			public boolean evaluate(Object candidate) {
				StateMachineEventDataItem_c selected = (StateMachineEventDataItem_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p55109))
						& (selected.getSmedi_id().equals(m_p55110));
				return retval;
			}
		}

		StateMachineEventDataItem_c[] objs55107 = StateMachineEventDataItem_c
				.StateMachineEventDataItemInstances(modelRoot,
						new StateMachineEventDataItem_c_test55108_c(getSm_id(),
								getSmedi_id()));

		if (((objs55107.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Dimensions", //$NON-NLS-1$
								"Consistency: Object: Dimensions: Association: 531: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs55107.length)
										+ " SM_ID: " + "Not Printable" + " SMedi_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Dimensions: Association: 531: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs55107.length)
										+ " SM_ID: " + "Not Printable" + " SMedi_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Dimensions is a referring class in association: rel.Numb = 849
		// The participating class is: Variable
		class Variable_c_test55112_c implements ClassQueryInterface_c {
			Variable_c_test55112_c(java.util.UUID p55113) {
				m_p55113 = p55113;
			}
			private java.util.UUID m_p55113;
			public boolean evaluate(Object candidate) {
				Variable_c selected = (Variable_c) candidate;
				boolean retval = false;
				retval = (selected.getVar_id().equals(m_p55113));
				return retval;
			}
		}

		Variable_c[] objs55111 = Variable_c.VariableInstances(modelRoot,
				new Variable_c_test55112_c(getVar_id()));

		if (((objs55111.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Dimensions", //$NON-NLS-1$
								"Consistency: Object: Dimensions: Association: 849: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs55111.length)
										+ " Var_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Dimensions: Association: 849: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs55111.length)
										+ " Var_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Dimensions is a referring class in association: rel.Numb = 844
		// The participating class is: Transient Var
		class TransientVar_c_test55115_c implements ClassQueryInterface_c {
			TransientVar_c_test55115_c(java.util.UUID p55116) {
				m_p55116 = p55116;
			}
			private java.util.UUID m_p55116;
			public boolean evaluate(Object candidate) {
				TransientVar_c selected = (TransientVar_c) candidate;
				boolean retval = false;
				retval = (selected.getVar_id().equals(m_p55116));
				return retval;
			}
		}

		TransientVar_c[] objs55114 = TransientVar_c.TransientVarInstances(
				modelRoot, new TransientVar_c_test55115_c(getVar_id()));

		if (((objs55114.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Dimensions", //$NON-NLS-1$
								"Consistency: Object: Dimensions: Association: 844: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs55114.length)
										+ " Var_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Dimensions: Association: 844: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs55114.length)
										+ " Var_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Dimensions is a referring class in association: rel.Numb = 51
		// The participating class is: Function
		class Function_c_test55118_c implements ClassQueryInterface_c {
			Function_c_test55118_c(java.util.UUID p55119) {
				m_p55119 = p55119;
			}
			private java.util.UUID m_p55119;
			public boolean evaluate(Object candidate) {
				Function_c selected = (Function_c) candidate;
				boolean retval = false;
				retval = (selected.getSync_id().equals(m_p55119));
				return retval;
			}
		}

		Function_c[] objs55117 = Function_c.FunctionInstances(modelRoot,
				new Function_c_test55118_c(getSync_id()));

		if (((objs55117.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Dimensions", //$NON-NLS-1$
								"Consistency: Object: Dimensions: Association: 51: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs55117.length)
										+ " Sync_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Dimensions: Association: 51: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs55117.length)
										+ " Sync_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Dimensions
